// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/core/v3/resolver.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Core.V3 {

  /// <summary>Holder for reflection information generated from envoy/config/core/v3/resolver.proto</summary>
  public static partial class ResolverReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/core/v3/resolver.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResolverReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNlbnZveS9jb25maWcvY29yZS92My9yZXNvbHZlci5wcm90bxIUZW52b3ku",
            "Y29uZmlnLmNvcmUudjMaImVudm95L2NvbmZpZy9jb3JlL3YzL2FkZHJlc3Mu",
            "cHJvdG8aHXVkcGEvYW5ub3RhdGlvbnMvc3RhdHVzLnByb3RvGhd2YWxpZGF0",
            "ZS92YWxpZGF0ZS5wcm90byJXChJEbnNSZXNvbHZlck9wdGlvbnMSHwoXdXNl",
            "X3RjcF9mb3JfZG5zX2xvb2t1cHMYASABKAgSIAoYbm9fZGVmYXVsdF9zZWFy",
            "Y2hfZG9tYWluGAIgASgIIpkBChNEbnNSZXNvbHV0aW9uQ29uZmlnEjoKCXJl",
            "c29sdmVycxgBIAMoCzIdLmVudm95LmNvbmZpZy5jb3JlLnYzLkFkZHJlc3NC",
            "CPpCBZIBAggBEkYKFGRuc19yZXNvbHZlcl9vcHRpb25zGAIgASgLMiguZW52",
            "b3kuY29uZmlnLmNvcmUudjMuRG5zUmVzb2x2ZXJPcHRpb25zQoEBCiJpby5l",
            "bnZveXByb3h5LmVudm95LmNvbmZpZy5jb3JlLnYzQg1SZXNvbHZlclByb3Rv",
            "UAFaQmdpdGh1Yi5jb20vZW52b3lwcm94eS9nby1jb250cm9sLXBsYW5lL2Vu",
            "dm95L2NvbmZpZy9jb3JlL3YzO2NvcmV2M7qAyNEGAhACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Core.V3.AddressReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Core.V3.DnsResolverOptions), global::Envoy.Config.Core.V3.DnsResolverOptions.Parser, new[]{ "UseTcpForDnsLookups", "NoDefaultSearchDomain" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Core.V3.DnsResolutionConfig), global::Envoy.Config.Core.V3.DnsResolutionConfig.Parser, new[]{ "Resolvers", "DnsResolverOptions" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
  /// </summary>
  public sealed partial class DnsResolverOptions : pb::IMessage<DnsResolverOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DnsResolverOptions> _parser = new pb::MessageParser<DnsResolverOptions>(() => new DnsResolverOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DnsResolverOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Core.V3.ResolverReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DnsResolverOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DnsResolverOptions(DnsResolverOptions other) : this() {
      useTcpForDnsLookups_ = other.useTcpForDnsLookups_;
      noDefaultSearchDomain_ = other.noDefaultSearchDomain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DnsResolverOptions Clone() {
      return new DnsResolverOptions(this);
    }

    /// <summary>Field number for the "use_tcp_for_dns_lookups" field.</summary>
    public const int UseTcpForDnsLookupsFieldNumber = 1;
    private bool useTcpForDnsLookups_;
    /// <summary>
    /// Use TCP for all DNS queries instead of the default protocol UDP.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseTcpForDnsLookups {
      get { return useTcpForDnsLookups_; }
      set {
        useTcpForDnsLookups_ = value;
      }
    }

    /// <summary>Field number for the "no_default_search_domain" field.</summary>
    public const int NoDefaultSearchDomainFieldNumber = 2;
    private bool noDefaultSearchDomain_;
    /// <summary>
    /// Do not use the default search domains; only query hostnames as-is or as aliases.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NoDefaultSearchDomain {
      get { return noDefaultSearchDomain_; }
      set {
        noDefaultSearchDomain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DnsResolverOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DnsResolverOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseTcpForDnsLookups != other.UseTcpForDnsLookups) return false;
      if (NoDefaultSearchDomain != other.NoDefaultSearchDomain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (UseTcpForDnsLookups != false) hash ^= UseTcpForDnsLookups.GetHashCode();
      if (NoDefaultSearchDomain != false) hash ^= NoDefaultSearchDomain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UseTcpForDnsLookups != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseTcpForDnsLookups);
      }
      if (NoDefaultSearchDomain != false) {
        output.WriteRawTag(16);
        output.WriteBool(NoDefaultSearchDomain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UseTcpForDnsLookups != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseTcpForDnsLookups);
      }
      if (NoDefaultSearchDomain != false) {
        output.WriteRawTag(16);
        output.WriteBool(NoDefaultSearchDomain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (UseTcpForDnsLookups != false) {
        size += 1 + 1;
      }
      if (NoDefaultSearchDomain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DnsResolverOptions other) {
      if (other == null) {
        return;
      }
      if (other.UseTcpForDnsLookups != false) {
        UseTcpForDnsLookups = other.UseTcpForDnsLookups;
      }
      if (other.NoDefaultSearchDomain != false) {
        NoDefaultSearchDomain = other.NoDefaultSearchDomain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UseTcpForDnsLookups = input.ReadBool();
            break;
          }
          case 16: {
            NoDefaultSearchDomain = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UseTcpForDnsLookups = input.ReadBool();
            break;
          }
          case 16: {
            NoDefaultSearchDomain = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// DNS resolution configuration which includes the underlying dns resolver addresses and options.
  /// </summary>
  public sealed partial class DnsResolutionConfig : pb::IMessage<DnsResolutionConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DnsResolutionConfig> _parser = new pb::MessageParser<DnsResolutionConfig>(() => new DnsResolutionConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DnsResolutionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Core.V3.ResolverReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DnsResolutionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DnsResolutionConfig(DnsResolutionConfig other) : this() {
      resolvers_ = other.resolvers_.Clone();
      dnsResolverOptions_ = other.dnsResolverOptions_ != null ? other.dnsResolverOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DnsResolutionConfig Clone() {
      return new DnsResolutionConfig(this);
    }

    /// <summary>Field number for the "resolvers" field.</summary>
    public const int ResolversFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Envoy.Config.Core.V3.Address> _repeated_resolvers_codec
        = pb::FieldCodec.ForMessage(10, global::Envoy.Config.Core.V3.Address.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Core.V3.Address> resolvers_ = new pbc::RepeatedField<global::Envoy.Config.Core.V3.Address>();
    /// <summary>
    /// A list of dns resolver addresses. If specified, the DNS client library will perform resolution
    /// via the underlying DNS resolvers. Otherwise, the default system resolvers
    /// (e.g., /etc/resolv.conf) will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Config.Core.V3.Address> Resolvers {
      get { return resolvers_; }
    }

    /// <summary>Field number for the "dns_resolver_options" field.</summary>
    public const int DnsResolverOptionsFieldNumber = 2;
    private global::Envoy.Config.Core.V3.DnsResolverOptions dnsResolverOptions_;
    /// <summary>
    /// Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.DnsResolverOptions DnsResolverOptions {
      get { return dnsResolverOptions_; }
      set {
        dnsResolverOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DnsResolutionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DnsResolutionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!resolvers_.Equals(other.resolvers_)) return false;
      if (!object.Equals(DnsResolverOptions, other.DnsResolverOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= resolvers_.GetHashCode();
      if (dnsResolverOptions_ != null) hash ^= DnsResolverOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      resolvers_.WriteTo(output, _repeated_resolvers_codec);
      if (dnsResolverOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DnsResolverOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      resolvers_.WriteTo(ref output, _repeated_resolvers_codec);
      if (dnsResolverOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DnsResolverOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += resolvers_.CalculateSize(_repeated_resolvers_codec);
      if (dnsResolverOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DnsResolverOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DnsResolutionConfig other) {
      if (other == null) {
        return;
      }
      resolvers_.Add(other.resolvers_);
      if (other.dnsResolverOptions_ != null) {
        if (dnsResolverOptions_ == null) {
          DnsResolverOptions = new global::Envoy.Config.Core.V3.DnsResolverOptions();
        }
        DnsResolverOptions.MergeFrom(other.DnsResolverOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resolvers_.AddEntriesFrom(input, _repeated_resolvers_codec);
            break;
          }
          case 18: {
            if (dnsResolverOptions_ == null) {
              DnsResolverOptions = new global::Envoy.Config.Core.V3.DnsResolverOptions();
            }
            input.ReadMessage(DnsResolverOptions);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            resolvers_.AddEntriesFrom(ref input, _repeated_resolvers_codec);
            break;
          }
          case 18: {
            if (dnsResolverOptions_ == null) {
              DnsResolverOptions = new global::Envoy.Config.Core.V3.DnsResolverOptions();
            }
            input.ReadMessage(DnsResolverOptions);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
