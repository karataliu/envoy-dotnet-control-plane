// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/core/v3/health_check.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Core.V3 {

  /// <summary>Holder for reflection information generated from envoy/config/core/v3/health_check.proto</summary>
  public static partial class HealthCheckReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/core/v3/health_check.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HealthCheckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidlbnZveS9jb25maWcvY29yZS92My9oZWFsdGhfY2hlY2sucHJvdG8SFGVu",
            "dm95LmNvbmZpZy5jb3JlLnYzGh9lbnZveS9jb25maWcvY29yZS92My9iYXNl",
            "LnByb3RvGi9lbnZveS9jb25maWcvY29yZS92My9ldmVudF9zZXJ2aWNlX2Nv",
            "bmZpZy5wcm90bxoiZW52b3kvdHlwZS9tYXRjaGVyL3YzL3N0cmluZy5wcm90",
            "bxoYZW52b3kvdHlwZS92My9odHRwLnByb3RvGhllbnZveS90eXBlL3YzL3Jh",
            "bmdlLnByb3RvGhlnb29nbGUvcHJvdG9idWYvYW55LnByb3RvGh5nb29nbGUv",
            "cHJvdG9idWYvZHVyYXRpb24ucHJvdG8aHGdvb2dsZS9wcm90b2J1Zi9zdHJ1",
            "Y3QucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxoddWRw",
            "YS9hbm5vdGF0aW9ucy9zdGF0dXMucHJvdG8aIXVkcGEvYW5ub3RhdGlvbnMv",
            "dmVyc2lvbmluZy5wcm90bxoXdmFsaWRhdGUvdmFsaWRhdGUucHJvdG8iVgoP",
            "SGVhbHRoU3RhdHVzU2V0EkMKCHN0YXR1c2VzGAEgAygOMiIuZW52b3kuY29u",
            "ZmlnLmNvcmUudjMuSGVhbHRoU3RhdHVzQg36QgqSAQciBYIBAhABItcYCgtI",
            "ZWFsdGhDaGVjaxI2Cgd0aW1lb3V0GAEgASgLMhkuZ29vZ2xlLnByb3RvYnVm",
            "LkR1cmF0aW9uQgr6QgeqAQQIASoAEjcKCGludGVydmFsGAIgASgLMhkuZ29v",
            "Z2xlLnByb3RvYnVmLkR1cmF0aW9uQgr6QgeqAQQIASoAEjEKDmluaXRpYWxf",
            "aml0dGVyGBQgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjIKD2lu",
            "dGVydmFsX2ppdHRlchgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlv",
            "bhIfChdpbnRlcnZhbF9qaXR0ZXJfcGVyY2VudBgSIAEoDRJDChN1bmhlYWx0",
            "aHlfdGhyZXNob2xkGAQgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZh",
            "bHVlQgj6QgWKAQIQARJBChFoZWFsdGh5X3RocmVzaG9sZBgFIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZUII+kIFigECEAESLgoIYWx0X3Bv",
            "cnQYBiABKAsyHC5nb29nbGUucHJvdG9idWYuVUludDMyVmFsdWUSNAoQcmV1",
            "c2VfY29ubmVjdGlvbhgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFs",
            "dWUSTgoRaHR0cF9oZWFsdGhfY2hlY2sYCCABKAsyMS5lbnZveS5jb25maWcu",
            "Y29yZS52My5IZWFsdGhDaGVjay5IdHRwSGVhbHRoQ2hlY2tIABJMChB0Y3Bf",
            "aGVhbHRoX2NoZWNrGAkgASgLMjAuZW52b3kuY29uZmlnLmNvcmUudjMuSGVh",
            "bHRoQ2hlY2suVGNwSGVhbHRoQ2hlY2tIABJOChFncnBjX2hlYWx0aF9jaGVj",
            "axgLIAEoCzIxLmVudm95LmNvbmZpZy5jb3JlLnYzLkhlYWx0aENoZWNrLkdy",
            "cGNIZWFsdGhDaGVja0gAElIKE2N1c3RvbV9oZWFsdGhfY2hlY2sYDSABKAsy",
            "My5lbnZveS5jb25maWcuY29yZS52My5IZWFsdGhDaGVjay5DdXN0b21IZWFs",
            "dGhDaGVja0gAEkAKE25vX3RyYWZmaWNfaW50ZXJ2YWwYDCABKAsyGS5nb29n",
            "bGUucHJvdG9idWYuRHVyYXRpb25CCPpCBaoBAioAEkgKG25vX3RyYWZmaWNf",
            "aGVhbHRoeV9pbnRlcnZhbBgYIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJh",
            "dGlvbkII+kIFqgECKgASPwoSdW5oZWFsdGh5X2ludGVydmFsGA4gASgLMhku",
            "Z29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgj6QgWqAQIqABJEChd1bmhlYWx0",
            "aHlfZWRnZV9pbnRlcnZhbBgPIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJh",
            "dGlvbkII+kIFqgECKgASQgoVaGVhbHRoeV9lZGdlX2ludGVydmFsGBAgASgL",
            "MhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgj6QgWqAQIqABIWCg5ldmVu",
            "dF9sb2dfcGF0aBgRIAEoCRI/Cg1ldmVudF9zZXJ2aWNlGBYgASgLMiguZW52",
            "b3kuY29uZmlnLmNvcmUudjMuRXZlbnRTZXJ2aWNlQ29uZmlnEigKIGFsd2F5",
            "c19sb2dfaGVhbHRoX2NoZWNrX2ZhaWx1cmVzGBMgASgIEkEKC3Rsc19vcHRp",
            "b25zGBUgASgLMiwuZW52b3kuY29uZmlnLmNvcmUudjMuSGVhbHRoQ2hlY2su",
            "VGxzT3B0aW9ucxJACh90cmFuc3BvcnRfc29ja2V0X21hdGNoX2NyaXRlcmlh",
            "GBcgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdBpyCgdQYXlsb2FkEhcK",
            "BHRleHQYASABKAlCB/pCBHICEAFIABIQCgZiaW5hcnkYAiABKAxIADosmsWI",
            "HicKJWVudm95LmFwaS52Mi5jb3JlLkhlYWx0aENoZWNrLlBheWxvYWRCDgoH",
            "cGF5bG9hZBID+EIBGp4GCg9IdHRwSGVhbHRoQ2hlY2sSGQoEaG9zdBgBIAEo",
            "CUIL+kIIcgbAAQLIAQASGwoEcGF0aBgCIAEoCUIN+kIKcggQAcABAsgBABI3",
            "CgRzZW5kGAMgASgLMikuZW52b3kuY29uZmlnLmNvcmUudjMuSGVhbHRoQ2hl",
            "Y2suUGF5bG9hZBI6CgdyZWNlaXZlGAQgAygLMikuZW52b3kuY29uZmlnLmNv",
            "cmUudjMuSGVhbHRoQ2hlY2suUGF5bG9hZBJDChRyZXNwb25zZV9idWZmZXJf",
            "c2l6ZRgOIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50NjRWYWx1ZUIH+kIE",
            "MgIoABJSChZyZXF1ZXN0X2hlYWRlcnNfdG9fYWRkGAYgAygLMicuZW52b3ku",
            "Y29uZmlnLmNvcmUudjMuSGVhZGVyVmFsdWVPcHRpb25CCfpCBpIBAxDoBxIz",
            "ChlyZXF1ZXN0X2hlYWRlcnNfdG9fcmVtb3ZlGAggAygJQhD6Qg2SAQoiCHIG",
            "wAEByAEAEjQKEWV4cGVjdGVkX3N0YXR1c2VzGAkgAygLMhkuZW52b3kudHlw",
            "ZS52My5JbnQ2NFJhbmdlEjUKEnJldHJpYWJsZV9zdGF0dXNlcxgMIAMoCzIZ",
            "LmVudm95LnR5cGUudjMuSW50NjRSYW5nZRJDChFjb2RlY19jbGllbnRfdHlw",
            "ZRgKIAEoDjIeLmVudm95LnR5cGUudjMuQ29kZWNDbGllbnRUeXBlQgj6QgWC",
            "AQIQARJCChRzZXJ2aWNlX25hbWVfbWF0Y2hlchgLIAEoCzIkLmVudm95LnR5",
            "cGUubWF0Y2hlci52My5TdHJpbmdNYXRjaGVyEj8KBm1ldGhvZBgNIAEoDjIj",
            "LmVudm95LmNvbmZpZy5jb3JlLnYzLlJlcXVlc3RNZXRob2RCCvpCB4IBBBAB",
            "IAY6NJrFiB4vCi1lbnZveS5hcGkudjIuY29yZS5IZWFsdGhDaGVjay5IdHRw",
            "SGVhbHRoQ2hlY2tKBAgFEAZKBAgHEAhSDHNlcnZpY2VfbmFtZVIJdXNlX2h0",
            "dHAyGroBCg5UY3BIZWFsdGhDaGVjaxI3CgRzZW5kGAEgASgLMikuZW52b3ku",
            "Y29uZmlnLmNvcmUudjMuSGVhbHRoQ2hlY2suUGF5bG9hZBI6CgdyZWNlaXZl",
            "GAIgAygLMikuZW52b3kuY29uZmlnLmNvcmUudjMuSGVhbHRoQ2hlY2suUGF5",
            "bG9hZDozmsWIHi4KLGVudm95LmFwaS52Mi5jb3JlLkhlYWx0aENoZWNrLlRj",
            "cEhlYWx0aENoZWNrGlYKEFJlZGlzSGVhbHRoQ2hlY2sSCwoDa2V5GAEgASgJ",
            "OjWaxYgeMAouZW52b3kuYXBpLnYyLmNvcmUuSGVhbHRoQ2hlY2suUmVkaXNI",
            "ZWFsdGhDaGVjaxrLAQoPR3JwY0hlYWx0aENoZWNrEhQKDHNlcnZpY2VfbmFt",
            "ZRgBIAEoCRIeCglhdXRob3JpdHkYAiABKAlCC/pCCHIGwAECyAEAEkwKEGlu",
            "aXRpYWxfbWV0YWRhdGEYAyADKAsyJy5lbnZveS5jb25maWcuY29yZS52My5I",
            "ZWFkZXJWYWx1ZU9wdGlvbkIJ+kIGkgEDEOgHOjSaxYgeLwotZW52b3kuYXBp",
            "LnYyLmNvcmUuSGVhbHRoQ2hlY2suR3JwY0hlYWx0aENoZWNrGq0BChFDdXN0",
            "b21IZWFsdGhDaGVjaxIVCgRuYW1lGAEgASgJQgf6QgRyAhABEiwKDHR5cGVk",
            "X2NvbmZpZxgDIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlIADo2msWIHjEK",
            "L2Vudm95LmFwaS52Mi5jb3JlLkhlYWx0aENoZWNrLkN1c3RvbUhlYWx0aENo",
            "ZWNrQg0KC2NvbmZpZ190eXBlSgQIAhADUgZjb25maWcaVQoKVGxzT3B0aW9u",
            "cxIWCg5hbHBuX3Byb3RvY29scxgBIAMoCTovmsWIHioKKGVudm95LmFwaS52",
            "Mi5jb3JlLkhlYWx0aENoZWNrLlRsc09wdGlvbnM6JJrFiB4fCh1lbnZveS5h",
            "cGkudjIuY29yZS5IZWFsdGhDaGVja0IVCg5oZWFsdGhfY2hlY2tlchID+EIB",
            "SgQIChALKmAKDEhlYWx0aFN0YXR1cxILCgdVTktOT1dOEAASCwoHSEVBTFRI",
            "WRABEg0KCVVOSEVBTFRIWRACEgwKCERSQUlOSU5HEAMSCwoHVElNRU9VVBAE",
            "EgwKCERFR1JBREVEEAVChAEKImlvLmVudm95cHJveHkuZW52b3kuY29uZmln",
            "LmNvcmUudjNCEEhlYWx0aENoZWNrUHJvdG9QAVpCZ2l0aHViLmNvbS9lbnZv",
            "eXByb3h5L2dvLWNvbnRyb2wtcGxhbmUvZW52b3kvY29uZmlnL2NvcmUvdjM7",
            "Y29yZXYzuoDI0QYCEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Core.V3.BaseReflection.Descriptor, global::Envoy.Config.Core.V3.EventServiceConfigReflection.Descriptor, global::Envoy.Type.Matcher.V3.StringReflection.Descriptor, global::Envoy.Type.V3.HttpReflection.Descriptor, global::Envoy.Type.V3.RangeReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Udpa.Annotations.VersioningReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Envoy.Config.Core.V3.HealthStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Core.V3.HealthStatusSet), global::Envoy.Config.Core.V3.HealthStatusSet.Parser, new[]{ "Statuses" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Core.V3.HealthCheck), global::Envoy.Config.Core.V3.HealthCheck.Parser, new[]{ "Timeout", "Interval", "InitialJitter", "IntervalJitter", "IntervalJitterPercent", "UnhealthyThreshold", "HealthyThreshold", "AltPort", "ReuseConnection", "HttpHealthCheck", "TcpHealthCheck", "GrpcHealthCheck", "CustomHealthCheck", "NoTrafficInterval", "NoTrafficHealthyInterval", "UnhealthyInterval", "UnhealthyEdgeInterval", "HealthyEdgeInterval", "EventLogPath", "EventService", "AlwaysLogHealthCheckFailures", "TlsOptions", "TransportSocketMatchCriteria" }, new[]{ "HealthChecker" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Core.V3.HealthCheck.Types.Payload), global::Envoy.Config.Core.V3.HealthCheck.Types.Payload.Parser, new[]{ "Text", "Binary" }, new[]{ "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Core.V3.HealthCheck.Types.HttpHealthCheck), global::Envoy.Config.Core.V3.HealthCheck.Types.HttpHealthCheck.Parser, new[]{ "Host", "Path", "Send", "Receive", "ResponseBufferSize", "RequestHeadersToAdd", "RequestHeadersToRemove", "ExpectedStatuses", "RetriableStatuses", "CodecClientType", "ServiceNameMatcher", "Method" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Core.V3.HealthCheck.Types.TcpHealthCheck), global::Envoy.Config.Core.V3.HealthCheck.Types.TcpHealthCheck.Parser, new[]{ "Send", "Receive" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Core.V3.HealthCheck.Types.RedisHealthCheck), global::Envoy.Config.Core.V3.HealthCheck.Types.RedisHealthCheck.Parser, new[]{ "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Core.V3.HealthCheck.Types.GrpcHealthCheck), global::Envoy.Config.Core.V3.HealthCheck.Types.GrpcHealthCheck.Parser, new[]{ "ServiceName", "Authority", "InitialMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Core.V3.HealthCheck.Types.CustomHealthCheck), global::Envoy.Config.Core.V3.HealthCheck.Types.CustomHealthCheck.Parser, new[]{ "Name", "TypedConfig" }, new[]{ "ConfigType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Core.V3.HealthCheck.Types.TlsOptions), global::Envoy.Config.Core.V3.HealthCheck.Types.TlsOptions.Parser, new[]{ "AlpnProtocols" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Endpoint health status.
  /// </summary>
  public enum HealthStatus {
    /// <summary>
    /// The health status is not known. This is interpreted by Envoy as ``HEALTHY``.
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    /// <summary>
    /// Healthy.
    /// </summary>
    [pbr::OriginalName("HEALTHY")] Healthy = 1,
    /// <summary>
    /// Unhealthy.
    /// </summary>
    [pbr::OriginalName("UNHEALTHY")] Unhealthy = 2,
    /// <summary>
    /// Connection draining in progress. E.g.,
    /// `&lt;https://aws.amazon.com/blogs/aws/elb-connection-draining-remove-instances-from-service-with-care/>`_
    /// or
    /// `&lt;https://cloud.google.com/compute/docs/load-balancing/enabling-connection-draining>`_.
    /// This is interpreted by Envoy as ``UNHEALTHY``.
    /// </summary>
    [pbr::OriginalName("DRAINING")] Draining = 3,
    /// <summary>
    /// Health check timed out. This is part of HDS and is interpreted by Envoy as
    /// ``UNHEALTHY``.
    /// </summary>
    [pbr::OriginalName("TIMEOUT")] Timeout = 4,
    /// <summary>
    /// Degraded.
    /// </summary>
    [pbr::OriginalName("DEGRADED")] Degraded = 5,
  }

  #endregion

  #region Messages
  public sealed partial class HealthStatusSet : pb::IMessage<HealthStatusSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HealthStatusSet> _parser = new pb::MessageParser<HealthStatusSet>(() => new HealthStatusSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HealthStatusSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Core.V3.HealthCheckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthStatusSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthStatusSet(HealthStatusSet other) : this() {
      statuses_ = other.statuses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthStatusSet Clone() {
      return new HealthStatusSet(this);
    }

    /// <summary>Field number for the "statuses" field.</summary>
    public const int StatusesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Envoy.Config.Core.V3.HealthStatus> _repeated_statuses_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Envoy.Config.Core.V3.HealthStatus) x);
    private readonly pbc::RepeatedField<global::Envoy.Config.Core.V3.HealthStatus> statuses_ = new pbc::RepeatedField<global::Envoy.Config.Core.V3.HealthStatus>();
    /// <summary>
    /// An order-independent set of health status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Config.Core.V3.HealthStatus> Statuses {
      get { return statuses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HealthStatusSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HealthStatusSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!statuses_.Equals(other.statuses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= statuses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      statuses_.WriteTo(output, _repeated_statuses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      statuses_.WriteTo(ref output, _repeated_statuses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += statuses_.CalculateSize(_repeated_statuses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HealthStatusSet other) {
      if (other == null) {
        return;
      }
      statuses_.Add(other.statuses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            statuses_.AddEntriesFrom(input, _repeated_statuses_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            statuses_.AddEntriesFrom(ref input, _repeated_statuses_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// [#next-free-field: 25]
  /// </summary>
  public sealed partial class HealthCheck : pb::IMessage<HealthCheck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HealthCheck> _parser = new pb::MessageParser<HealthCheck>(() => new HealthCheck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HealthCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Core.V3.HealthCheckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthCheck(HealthCheck other) : this() {
      timeout_ = other.timeout_ != null ? other.timeout_.Clone() : null;
      interval_ = other.interval_ != null ? other.interval_.Clone() : null;
      initialJitter_ = other.initialJitter_ != null ? other.initialJitter_.Clone() : null;
      intervalJitter_ = other.intervalJitter_ != null ? other.intervalJitter_.Clone() : null;
      intervalJitterPercent_ = other.intervalJitterPercent_;
      UnhealthyThreshold = other.UnhealthyThreshold;
      HealthyThreshold = other.HealthyThreshold;
      AltPort = other.AltPort;
      ReuseConnection = other.ReuseConnection;
      noTrafficInterval_ = other.noTrafficInterval_ != null ? other.noTrafficInterval_.Clone() : null;
      noTrafficHealthyInterval_ = other.noTrafficHealthyInterval_ != null ? other.noTrafficHealthyInterval_.Clone() : null;
      unhealthyInterval_ = other.unhealthyInterval_ != null ? other.unhealthyInterval_.Clone() : null;
      unhealthyEdgeInterval_ = other.unhealthyEdgeInterval_ != null ? other.unhealthyEdgeInterval_.Clone() : null;
      healthyEdgeInterval_ = other.healthyEdgeInterval_ != null ? other.healthyEdgeInterval_.Clone() : null;
      eventLogPath_ = other.eventLogPath_;
      eventService_ = other.eventService_ != null ? other.eventService_.Clone() : null;
      alwaysLogHealthCheckFailures_ = other.alwaysLogHealthCheckFailures_;
      tlsOptions_ = other.tlsOptions_ != null ? other.tlsOptions_.Clone() : null;
      transportSocketMatchCriteria_ = other.transportSocketMatchCriteria_ != null ? other.transportSocketMatchCriteria_.Clone() : null;
      switch (other.HealthCheckerCase) {
        case HealthCheckerOneofCase.HttpHealthCheck:
          HttpHealthCheck = other.HttpHealthCheck.Clone();
          break;
        case HealthCheckerOneofCase.TcpHealthCheck:
          TcpHealthCheck = other.TcpHealthCheck.Clone();
          break;
        case HealthCheckerOneofCase.GrpcHealthCheck:
          GrpcHealthCheck = other.GrpcHealthCheck.Clone();
          break;
        case HealthCheckerOneofCase.CustomHealthCheck:
          CustomHealthCheck = other.CustomHealthCheck.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthCheck Clone() {
      return new HealthCheck(this);
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration timeout_;
    /// <summary>
    /// The time to wait for a health check response. If the timeout is reached the
    /// health check attempt will be considered a failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration interval_;
    /// <summary>
    /// The interval between health checks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "initial_jitter" field.</summary>
    public const int InitialJitterFieldNumber = 20;
    private global::Google.Protobuf.WellKnownTypes.Duration initialJitter_;
    /// <summary>
    /// An optional jitter amount in milliseconds. If specified, Envoy will start health
    /// checking after for a random time in ms between 0 and initial_jitter. This only
    /// applies to the first health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration InitialJitter {
      get { return initialJitter_; }
      set {
        initialJitter_ = value;
      }
    }

    /// <summary>Field number for the "interval_jitter" field.</summary>
    public const int IntervalJitterFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration intervalJitter_;
    /// <summary>
    /// An optional jitter amount in milliseconds. If specified, during every
    /// interval Envoy will add interval_jitter to the wait time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration IntervalJitter {
      get { return intervalJitter_; }
      set {
        intervalJitter_ = value;
      }
    }

    /// <summary>Field number for the "interval_jitter_percent" field.</summary>
    public const int IntervalJitterPercentFieldNumber = 18;
    private uint intervalJitterPercent_;
    /// <summary>
    /// An optional jitter amount as a percentage of interval_ms. If specified,
    /// during every interval Envoy will add ``interval_ms`` *
    /// ``interval_jitter_percent`` / 100 to the wait time.
    ///
    /// If interval_jitter_ms and interval_jitter_percent are both set, both of
    /// them will be used to increase the wait time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint IntervalJitterPercent {
      get { return intervalJitterPercent_; }
      set {
        intervalJitterPercent_ = value;
      }
    }

    /// <summary>Field number for the "unhealthy_threshold" field.</summary>
    public const int UnhealthyThresholdFieldNumber = 4;
    private static readonly pb::FieldCodec<uint?> _single_unhealthyThreshold_codec = pb::FieldCodec.ForStructWrapper<uint>(34);
    private uint? unhealthyThreshold_;
    /// <summary>
    /// The number of unhealthy health checks required before a host is marked
    /// unhealthy. Note that for ``http`` health checking if a host responds with a code not in
    /// :ref:`expected_statuses &lt;envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.expected_statuses>`
    /// or :ref:`retriable_statuses &lt;envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.retriable_statuses>`,
    /// this threshold is ignored and the host is considered immediately unhealthy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? UnhealthyThreshold {
      get { return unhealthyThreshold_; }
      set {
        unhealthyThreshold_ = value;
      }
    }


    /// <summary>Field number for the "healthy_threshold" field.</summary>
    public const int HealthyThresholdFieldNumber = 5;
    private static readonly pb::FieldCodec<uint?> _single_healthyThreshold_codec = pb::FieldCodec.ForStructWrapper<uint>(42);
    private uint? healthyThreshold_;
    /// <summary>
    /// The number of healthy health checks required before a host is marked
    /// healthy. Note that during startup, only a single successful health check is
    /// required to mark a host healthy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? HealthyThreshold {
      get { return healthyThreshold_; }
      set {
        healthyThreshold_ = value;
      }
    }


    /// <summary>Field number for the "alt_port" field.</summary>
    public const int AltPortFieldNumber = 6;
    private static readonly pb::FieldCodec<uint?> _single_altPort_codec = pb::FieldCodec.ForStructWrapper<uint>(50);
    private uint? altPort_;
    /// <summary>
    /// [#not-implemented-hide:] Non-serving port for health checking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? AltPort {
      get { return altPort_; }
      set {
        altPort_ = value;
      }
    }


    /// <summary>Field number for the "reuse_connection" field.</summary>
    public const int ReuseConnectionFieldNumber = 7;
    private static readonly pb::FieldCodec<bool?> _single_reuseConnection_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
    private bool? reuseConnection_;
    /// <summary>
    /// Reuse health check connection between health checks. Default is true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool? ReuseConnection {
      get { return reuseConnection_; }
      set {
        reuseConnection_ = value;
      }
    }


    /// <summary>Field number for the "http_health_check" field.</summary>
    public const int HttpHealthCheckFieldNumber = 8;
    /// <summary>
    /// HTTP health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.HealthCheck.Types.HttpHealthCheck HttpHealthCheck {
      get { return healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck ? (global::Envoy.Config.Core.V3.HealthCheck.Types.HttpHealthCheck) healthChecker_ : null; }
      set {
        healthChecker_ = value;
        healthCheckerCase_ = value == null ? HealthCheckerOneofCase.None : HealthCheckerOneofCase.HttpHealthCheck;
      }
    }

    /// <summary>Field number for the "tcp_health_check" field.</summary>
    public const int TcpHealthCheckFieldNumber = 9;
    /// <summary>
    /// TCP health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.HealthCheck.Types.TcpHealthCheck TcpHealthCheck {
      get { return healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck ? (global::Envoy.Config.Core.V3.HealthCheck.Types.TcpHealthCheck) healthChecker_ : null; }
      set {
        healthChecker_ = value;
        healthCheckerCase_ = value == null ? HealthCheckerOneofCase.None : HealthCheckerOneofCase.TcpHealthCheck;
      }
    }

    /// <summary>Field number for the "grpc_health_check" field.</summary>
    public const int GrpcHealthCheckFieldNumber = 11;
    /// <summary>
    /// gRPC health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.HealthCheck.Types.GrpcHealthCheck GrpcHealthCheck {
      get { return healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck ? (global::Envoy.Config.Core.V3.HealthCheck.Types.GrpcHealthCheck) healthChecker_ : null; }
      set {
        healthChecker_ = value;
        healthCheckerCase_ = value == null ? HealthCheckerOneofCase.None : HealthCheckerOneofCase.GrpcHealthCheck;
      }
    }

    /// <summary>Field number for the "custom_health_check" field.</summary>
    public const int CustomHealthCheckFieldNumber = 13;
    /// <summary>
    /// Custom health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.HealthCheck.Types.CustomHealthCheck CustomHealthCheck {
      get { return healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck ? (global::Envoy.Config.Core.V3.HealthCheck.Types.CustomHealthCheck) healthChecker_ : null; }
      set {
        healthChecker_ = value;
        healthCheckerCase_ = value == null ? HealthCheckerOneofCase.None : HealthCheckerOneofCase.CustomHealthCheck;
      }
    }

    /// <summary>Field number for the "no_traffic_interval" field.</summary>
    public const int NoTrafficIntervalFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Duration noTrafficInterval_;
    /// <summary>
    /// The "no traffic interval" is a special health check interval that is used when a cluster has
    /// never had traffic routed to it. This lower interval allows cluster information to be kept up to
    /// date, without sending a potentially large amount of active health checking traffic for no
    /// reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the
    /// standard health check interval that is defined. Note that this interval takes precedence over
    /// any other.
    ///
    /// The default value for "no traffic interval" is 60 seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration NoTrafficInterval {
      get { return noTrafficInterval_; }
      set {
        noTrafficInterval_ = value;
      }
    }

    /// <summary>Field number for the "no_traffic_healthy_interval" field.</summary>
    public const int NoTrafficHealthyIntervalFieldNumber = 24;
    private global::Google.Protobuf.WellKnownTypes.Duration noTrafficHealthyInterval_;
    /// <summary>
    /// The "no traffic healthy interval" is a special health check interval that
    /// is used for hosts that are currently passing active health checking
    /// (including new hosts) when the cluster has received no traffic.
    ///
    /// This is useful for when we want to send frequent health checks with
    /// ``no_traffic_interval`` but then revert to lower frequency ``no_traffic_healthy_interval`` once
    /// a host in the cluster is marked as healthy.
    ///
    /// Once a cluster has been used for traffic routing, Envoy will shift back to using the
    /// standard health check interval that is defined.
    ///
    /// If no_traffic_healthy_interval is not set, it will default to the
    /// no traffic interval and send that interval regardless of health state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration NoTrafficHealthyInterval {
      get { return noTrafficHealthyInterval_; }
      set {
        noTrafficHealthyInterval_ = value;
      }
    }

    /// <summary>Field number for the "unhealthy_interval" field.</summary>
    public const int UnhealthyIntervalFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Duration unhealthyInterval_;
    /// <summary>
    /// The "unhealthy interval" is a health check interval that is used for hosts that are marked as
    /// unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the
    /// standard health check interval that is defined.
    ///
    /// The default value for "unhealthy interval" is the same as "interval".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration UnhealthyInterval {
      get { return unhealthyInterval_; }
      set {
        unhealthyInterval_ = value;
      }
    }

    /// <summary>Field number for the "unhealthy_edge_interval" field.</summary>
    public const int UnhealthyEdgeIntervalFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Duration unhealthyEdgeInterval_;
    /// <summary>
    /// The "unhealthy edge interval" is a special health check interval that is used for the first
    /// health check right after a host is marked as unhealthy. For subsequent health checks
    /// Envoy will shift back to using either "unhealthy interval" if present or the standard health
    /// check interval that is defined.
    ///
    /// The default value for "unhealthy edge interval" is the same as "unhealthy interval".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration UnhealthyEdgeInterval {
      get { return unhealthyEdgeInterval_; }
      set {
        unhealthyEdgeInterval_ = value;
      }
    }

    /// <summary>Field number for the "healthy_edge_interval" field.</summary>
    public const int HealthyEdgeIntervalFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Duration healthyEdgeInterval_;
    /// <summary>
    /// The "healthy edge interval" is a special health check interval that is used for the first
    /// health check right after a host is marked as healthy. For subsequent health checks
    /// Envoy will shift back to using the standard health check interval that is defined.
    ///
    /// The default value for "healthy edge interval" is the same as the default interval.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration HealthyEdgeInterval {
      get { return healthyEdgeInterval_; }
      set {
        healthyEdgeInterval_ = value;
      }
    }

    /// <summary>Field number for the "event_log_path" field.</summary>
    public const int EventLogPathFieldNumber = 17;
    private string eventLogPath_ = "";
    /// <summary>
    /// Specifies the path to the :ref:`health check event log &lt;arch_overview_health_check_logging>`.
    /// If empty, no event log will be written.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EventLogPath {
      get { return eventLogPath_; }
      set {
        eventLogPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_service" field.</summary>
    public const int EventServiceFieldNumber = 22;
    private global::Envoy.Config.Core.V3.EventServiceConfig eventService_;
    /// <summary>
    /// [#not-implemented-hide:]
    /// The gRPC service for the health check event service.
    /// If empty, health check events won't be sent to a remote endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.EventServiceConfig EventService {
      get { return eventService_; }
      set {
        eventService_ = value;
      }
    }

    /// <summary>Field number for the "always_log_health_check_failures" field.</summary>
    public const int AlwaysLogHealthCheckFailuresFieldNumber = 19;
    private bool alwaysLogHealthCheckFailures_;
    /// <summary>
    /// If set to true, health check failure events will always be logged. If set to false, only the
    /// initial health check failure event will be logged.
    /// The default value is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AlwaysLogHealthCheckFailures {
      get { return alwaysLogHealthCheckFailures_; }
      set {
        alwaysLogHealthCheckFailures_ = value;
      }
    }

    /// <summary>Field number for the "tls_options" field.</summary>
    public const int TlsOptionsFieldNumber = 21;
    private global::Envoy.Config.Core.V3.HealthCheck.Types.TlsOptions tlsOptions_;
    /// <summary>
    /// This allows overriding the cluster TLS settings, just for health check connections.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.HealthCheck.Types.TlsOptions TlsOptions {
      get { return tlsOptions_; }
      set {
        tlsOptions_ = value;
      }
    }

    /// <summary>Field number for the "transport_socket_match_criteria" field.</summary>
    public const int TransportSocketMatchCriteriaFieldNumber = 23;
    private global::Google.Protobuf.WellKnownTypes.Struct transportSocketMatchCriteria_;
    /// <summary>
    /// Optional key/value pairs that will be used to match a transport socket from those specified in the cluster's
    /// :ref:`tranport socket matches &lt;envoy_v3_api_field_config.cluster.v3.Cluster.transport_socket_matches>`.
    /// For example, the following match criteria
    ///
    /// .. code-block:: yaml
    ///
    ///  transport_socket_match_criteria:
    ///    useMTLS: true
    ///
    /// Will match the following :ref:`cluster socket match &lt;envoy_v3_api_msg_config.cluster.v3.Cluster.TransportSocketMatch>`
    ///
    /// .. code-block:: yaml
    ///
    ///  transport_socket_matches:
    ///  - name: "useMTLS"
    ///    match:
    ///      useMTLS: true
    ///    transport_socket:
    ///      name: envoy.transport_sockets.tls
    ///      config: { ... } # tls socket configuration
    ///
    /// If this field is set, then for health checks it will supersede an entry of ``envoy.transport_socket`` in the
    /// :ref:`LbEndpoint.Metadata &lt;envoy_v3_api_field_config.endpoint.v3.LbEndpoint.metadata>`.
    /// This allows using different transport socket capabilities for health checking versus proxying to the
    /// endpoint.
    ///
    /// If the key/values pairs specified do not match any
    /// :ref:`transport socket matches &lt;envoy_v3_api_field_config.cluster.v3.Cluster.transport_socket_matches>`,
    /// the cluster's :ref:`transport socket &lt;envoy_v3_api_field_config.cluster.v3.Cluster.transport_socket>`
    /// will be used for health check socket configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Struct TransportSocketMatchCriteria {
      get { return transportSocketMatchCriteria_; }
      set {
        transportSocketMatchCriteria_ = value;
      }
    }

    private object healthChecker_;
    /// <summary>Enum of possible cases for the "health_checker" oneof.</summary>
    public enum HealthCheckerOneofCase {
      None = 0,
      HttpHealthCheck = 8,
      TcpHealthCheck = 9,
      GrpcHealthCheck = 11,
      CustomHealthCheck = 13,
    }
    private HealthCheckerOneofCase healthCheckerCase_ = HealthCheckerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthCheckerOneofCase HealthCheckerCase {
      get { return healthCheckerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHealthChecker() {
      healthCheckerCase_ = HealthCheckerOneofCase.None;
      healthChecker_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HealthCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HealthCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timeout, other.Timeout)) return false;
      if (!object.Equals(Interval, other.Interval)) return false;
      if (!object.Equals(InitialJitter, other.InitialJitter)) return false;
      if (!object.Equals(IntervalJitter, other.IntervalJitter)) return false;
      if (IntervalJitterPercent != other.IntervalJitterPercent) return false;
      if (UnhealthyThreshold != other.UnhealthyThreshold) return false;
      if (HealthyThreshold != other.HealthyThreshold) return false;
      if (AltPort != other.AltPort) return false;
      if (ReuseConnection != other.ReuseConnection) return false;
      if (!object.Equals(HttpHealthCheck, other.HttpHealthCheck)) return false;
      if (!object.Equals(TcpHealthCheck, other.TcpHealthCheck)) return false;
      if (!object.Equals(GrpcHealthCheck, other.GrpcHealthCheck)) return false;
      if (!object.Equals(CustomHealthCheck, other.CustomHealthCheck)) return false;
      if (!object.Equals(NoTrafficInterval, other.NoTrafficInterval)) return false;
      if (!object.Equals(NoTrafficHealthyInterval, other.NoTrafficHealthyInterval)) return false;
      if (!object.Equals(UnhealthyInterval, other.UnhealthyInterval)) return false;
      if (!object.Equals(UnhealthyEdgeInterval, other.UnhealthyEdgeInterval)) return false;
      if (!object.Equals(HealthyEdgeInterval, other.HealthyEdgeInterval)) return false;
      if (EventLogPath != other.EventLogPath) return false;
      if (!object.Equals(EventService, other.EventService)) return false;
      if (AlwaysLogHealthCheckFailures != other.AlwaysLogHealthCheckFailures) return false;
      if (!object.Equals(TlsOptions, other.TlsOptions)) return false;
      if (!object.Equals(TransportSocketMatchCriteria, other.TransportSocketMatchCriteria)) return false;
      if (HealthCheckerCase != other.HealthCheckerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (timeout_ != null) hash ^= Timeout.GetHashCode();
      if (interval_ != null) hash ^= Interval.GetHashCode();
      if (initialJitter_ != null) hash ^= InitialJitter.GetHashCode();
      if (intervalJitter_ != null) hash ^= IntervalJitter.GetHashCode();
      if (IntervalJitterPercent != 0) hash ^= IntervalJitterPercent.GetHashCode();
      if (unhealthyThreshold_ != null) hash ^= UnhealthyThreshold.GetHashCode();
      if (healthyThreshold_ != null) hash ^= HealthyThreshold.GetHashCode();
      if (altPort_ != null) hash ^= AltPort.GetHashCode();
      if (reuseConnection_ != null) hash ^= ReuseConnection.GetHashCode();
      if (healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck) hash ^= HttpHealthCheck.GetHashCode();
      if (healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck) hash ^= TcpHealthCheck.GetHashCode();
      if (healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck) hash ^= GrpcHealthCheck.GetHashCode();
      if (healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck) hash ^= CustomHealthCheck.GetHashCode();
      if (noTrafficInterval_ != null) hash ^= NoTrafficInterval.GetHashCode();
      if (noTrafficHealthyInterval_ != null) hash ^= NoTrafficHealthyInterval.GetHashCode();
      if (unhealthyInterval_ != null) hash ^= UnhealthyInterval.GetHashCode();
      if (unhealthyEdgeInterval_ != null) hash ^= UnhealthyEdgeInterval.GetHashCode();
      if (healthyEdgeInterval_ != null) hash ^= HealthyEdgeInterval.GetHashCode();
      if (EventLogPath.Length != 0) hash ^= EventLogPath.GetHashCode();
      if (eventService_ != null) hash ^= EventService.GetHashCode();
      if (AlwaysLogHealthCheckFailures != false) hash ^= AlwaysLogHealthCheckFailures.GetHashCode();
      if (tlsOptions_ != null) hash ^= TlsOptions.GetHashCode();
      if (transportSocketMatchCriteria_ != null) hash ^= TransportSocketMatchCriteria.GetHashCode();
      hash ^= (int) healthCheckerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (timeout_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timeout);
      }
      if (interval_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Interval);
      }
      if (intervalJitter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(IntervalJitter);
      }
      if (unhealthyThreshold_ != null) {
        _single_unhealthyThreshold_codec.WriteTagAndValue(output, UnhealthyThreshold);
      }
      if (healthyThreshold_ != null) {
        _single_healthyThreshold_codec.WriteTagAndValue(output, HealthyThreshold);
      }
      if (altPort_ != null) {
        _single_altPort_codec.WriteTagAndValue(output, AltPort);
      }
      if (reuseConnection_ != null) {
        _single_reuseConnection_codec.WriteTagAndValue(output, ReuseConnection);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck) {
        output.WriteRawTag(66);
        output.WriteMessage(HttpHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck) {
        output.WriteRawTag(74);
        output.WriteMessage(TcpHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck) {
        output.WriteRawTag(90);
        output.WriteMessage(GrpcHealthCheck);
      }
      if (noTrafficInterval_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(NoTrafficInterval);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck) {
        output.WriteRawTag(106);
        output.WriteMessage(CustomHealthCheck);
      }
      if (unhealthyInterval_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(UnhealthyInterval);
      }
      if (unhealthyEdgeInterval_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UnhealthyEdgeInterval);
      }
      if (healthyEdgeInterval_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(HealthyEdgeInterval);
      }
      if (EventLogPath.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(EventLogPath);
      }
      if (IntervalJitterPercent != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(IntervalJitterPercent);
      }
      if (AlwaysLogHealthCheckFailures != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(AlwaysLogHealthCheckFailures);
      }
      if (initialJitter_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(InitialJitter);
      }
      if (tlsOptions_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(TlsOptions);
      }
      if (eventService_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(EventService);
      }
      if (transportSocketMatchCriteria_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(TransportSocketMatchCriteria);
      }
      if (noTrafficHealthyInterval_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(NoTrafficHealthyInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (timeout_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timeout);
      }
      if (interval_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Interval);
      }
      if (intervalJitter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(IntervalJitter);
      }
      if (unhealthyThreshold_ != null) {
        _single_unhealthyThreshold_codec.WriteTagAndValue(ref output, UnhealthyThreshold);
      }
      if (healthyThreshold_ != null) {
        _single_healthyThreshold_codec.WriteTagAndValue(ref output, HealthyThreshold);
      }
      if (altPort_ != null) {
        _single_altPort_codec.WriteTagAndValue(ref output, AltPort);
      }
      if (reuseConnection_ != null) {
        _single_reuseConnection_codec.WriteTagAndValue(ref output, ReuseConnection);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck) {
        output.WriteRawTag(66);
        output.WriteMessage(HttpHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck) {
        output.WriteRawTag(74);
        output.WriteMessage(TcpHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck) {
        output.WriteRawTag(90);
        output.WriteMessage(GrpcHealthCheck);
      }
      if (noTrafficInterval_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(NoTrafficInterval);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck) {
        output.WriteRawTag(106);
        output.WriteMessage(CustomHealthCheck);
      }
      if (unhealthyInterval_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(UnhealthyInterval);
      }
      if (unhealthyEdgeInterval_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UnhealthyEdgeInterval);
      }
      if (healthyEdgeInterval_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(HealthyEdgeInterval);
      }
      if (EventLogPath.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(EventLogPath);
      }
      if (IntervalJitterPercent != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(IntervalJitterPercent);
      }
      if (AlwaysLogHealthCheckFailures != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(AlwaysLogHealthCheckFailures);
      }
      if (initialJitter_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(InitialJitter);
      }
      if (tlsOptions_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(TlsOptions);
      }
      if (eventService_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(EventService);
      }
      if (transportSocketMatchCriteria_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(TransportSocketMatchCriteria);
      }
      if (noTrafficHealthyInterval_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(NoTrafficHealthyInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (timeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeout);
      }
      if (interval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (initialJitter_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InitialJitter);
      }
      if (intervalJitter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IntervalJitter);
      }
      if (IntervalJitterPercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IntervalJitterPercent);
      }
      if (unhealthyThreshold_ != null) {
        size += _single_unhealthyThreshold_codec.CalculateSizeWithTag(UnhealthyThreshold);
      }
      if (healthyThreshold_ != null) {
        size += _single_healthyThreshold_codec.CalculateSizeWithTag(HealthyThreshold);
      }
      if (altPort_ != null) {
        size += _single_altPort_codec.CalculateSizeWithTag(AltPort);
      }
      if (reuseConnection_ != null) {
        size += _single_reuseConnection_codec.CalculateSizeWithTag(ReuseConnection);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TcpHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GrpcHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomHealthCheck);
      }
      if (noTrafficInterval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NoTrafficInterval);
      }
      if (noTrafficHealthyInterval_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NoTrafficHealthyInterval);
      }
      if (unhealthyInterval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnhealthyInterval);
      }
      if (unhealthyEdgeInterval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnhealthyEdgeInterval);
      }
      if (healthyEdgeInterval_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HealthyEdgeInterval);
      }
      if (EventLogPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EventLogPath);
      }
      if (eventService_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventService);
      }
      if (AlwaysLogHealthCheckFailures != false) {
        size += 2 + 1;
      }
      if (tlsOptions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TlsOptions);
      }
      if (transportSocketMatchCriteria_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransportSocketMatchCriteria);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HealthCheck other) {
      if (other == null) {
        return;
      }
      if (other.timeout_ != null) {
        if (timeout_ == null) {
          Timeout = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Timeout.MergeFrom(other.Timeout);
      }
      if (other.interval_ != null) {
        if (interval_ == null) {
          Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Interval.MergeFrom(other.Interval);
      }
      if (other.initialJitter_ != null) {
        if (initialJitter_ == null) {
          InitialJitter = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        InitialJitter.MergeFrom(other.InitialJitter);
      }
      if (other.intervalJitter_ != null) {
        if (intervalJitter_ == null) {
          IntervalJitter = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        IntervalJitter.MergeFrom(other.IntervalJitter);
      }
      if (other.IntervalJitterPercent != 0) {
        IntervalJitterPercent = other.IntervalJitterPercent;
      }
      if (other.unhealthyThreshold_ != null) {
        if (unhealthyThreshold_ == null || other.UnhealthyThreshold != 0) {
          UnhealthyThreshold = other.UnhealthyThreshold;
        }
      }
      if (other.healthyThreshold_ != null) {
        if (healthyThreshold_ == null || other.HealthyThreshold != 0) {
          HealthyThreshold = other.HealthyThreshold;
        }
      }
      if (other.altPort_ != null) {
        if (altPort_ == null || other.AltPort != 0) {
          AltPort = other.AltPort;
        }
      }
      if (other.reuseConnection_ != null) {
        if (reuseConnection_ == null || other.ReuseConnection != false) {
          ReuseConnection = other.ReuseConnection;
        }
      }
      if (other.noTrafficInterval_ != null) {
        if (noTrafficInterval_ == null) {
          NoTrafficInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        NoTrafficInterval.MergeFrom(other.NoTrafficInterval);
      }
      if (other.noTrafficHealthyInterval_ != null) {
        if (noTrafficHealthyInterval_ == null) {
          NoTrafficHealthyInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        NoTrafficHealthyInterval.MergeFrom(other.NoTrafficHealthyInterval);
      }
      if (other.unhealthyInterval_ != null) {
        if (unhealthyInterval_ == null) {
          UnhealthyInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        UnhealthyInterval.MergeFrom(other.UnhealthyInterval);
      }
      if (other.unhealthyEdgeInterval_ != null) {
        if (unhealthyEdgeInterval_ == null) {
          UnhealthyEdgeInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        UnhealthyEdgeInterval.MergeFrom(other.UnhealthyEdgeInterval);
      }
      if (other.healthyEdgeInterval_ != null) {
        if (healthyEdgeInterval_ == null) {
          HealthyEdgeInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        HealthyEdgeInterval.MergeFrom(other.HealthyEdgeInterval);
      }
      if (other.EventLogPath.Length != 0) {
        EventLogPath = other.EventLogPath;
      }
      if (other.eventService_ != null) {
        if (eventService_ == null) {
          EventService = new global::Envoy.Config.Core.V3.EventServiceConfig();
        }
        EventService.MergeFrom(other.EventService);
      }
      if (other.AlwaysLogHealthCheckFailures != false) {
        AlwaysLogHealthCheckFailures = other.AlwaysLogHealthCheckFailures;
      }
      if (other.tlsOptions_ != null) {
        if (tlsOptions_ == null) {
          TlsOptions = new global::Envoy.Config.Core.V3.HealthCheck.Types.TlsOptions();
        }
        TlsOptions.MergeFrom(other.TlsOptions);
      }
      if (other.transportSocketMatchCriteria_ != null) {
        if (transportSocketMatchCriteria_ == null) {
          TransportSocketMatchCriteria = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        TransportSocketMatchCriteria.MergeFrom(other.TransportSocketMatchCriteria);
      }
      switch (other.HealthCheckerCase) {
        case HealthCheckerOneofCase.HttpHealthCheck:
          if (HttpHealthCheck == null) {
            HttpHealthCheck = new global::Envoy.Config.Core.V3.HealthCheck.Types.HttpHealthCheck();
          }
          HttpHealthCheck.MergeFrom(other.HttpHealthCheck);
          break;
        case HealthCheckerOneofCase.TcpHealthCheck:
          if (TcpHealthCheck == null) {
            TcpHealthCheck = new global::Envoy.Config.Core.V3.HealthCheck.Types.TcpHealthCheck();
          }
          TcpHealthCheck.MergeFrom(other.TcpHealthCheck);
          break;
        case HealthCheckerOneofCase.GrpcHealthCheck:
          if (GrpcHealthCheck == null) {
            GrpcHealthCheck = new global::Envoy.Config.Core.V3.HealthCheck.Types.GrpcHealthCheck();
          }
          GrpcHealthCheck.MergeFrom(other.GrpcHealthCheck);
          break;
        case HealthCheckerOneofCase.CustomHealthCheck:
          if (CustomHealthCheck == null) {
            CustomHealthCheck = new global::Envoy.Config.Core.V3.HealthCheck.Types.CustomHealthCheck();
          }
          CustomHealthCheck.MergeFrom(other.CustomHealthCheck);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timeout_ == null) {
              Timeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Timeout);
            break;
          }
          case 18: {
            if (interval_ == null) {
              Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 26: {
            if (intervalJitter_ == null) {
              IntervalJitter = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(IntervalJitter);
            break;
          }
          case 34: {
            uint? value = _single_unhealthyThreshold_codec.Read(input);
            if (unhealthyThreshold_ == null || value != 0) {
              UnhealthyThreshold = value;
            }
            break;
          }
          case 42: {
            uint? value = _single_healthyThreshold_codec.Read(input);
            if (healthyThreshold_ == null || value != 0) {
              HealthyThreshold = value;
            }
            break;
          }
          case 50: {
            uint? value = _single_altPort_codec.Read(input);
            if (altPort_ == null || value != 0) {
              AltPort = value;
            }
            break;
          }
          case 58: {
            bool? value = _single_reuseConnection_codec.Read(input);
            if (reuseConnection_ == null || value != false) {
              ReuseConnection = value;
            }
            break;
          }
          case 66: {
            global::Envoy.Config.Core.V3.HealthCheck.Types.HttpHealthCheck subBuilder = new global::Envoy.Config.Core.V3.HealthCheck.Types.HttpHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck) {
              subBuilder.MergeFrom(HttpHealthCheck);
            }
            input.ReadMessage(subBuilder);
            HttpHealthCheck = subBuilder;
            break;
          }
          case 74: {
            global::Envoy.Config.Core.V3.HealthCheck.Types.TcpHealthCheck subBuilder = new global::Envoy.Config.Core.V3.HealthCheck.Types.TcpHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck) {
              subBuilder.MergeFrom(TcpHealthCheck);
            }
            input.ReadMessage(subBuilder);
            TcpHealthCheck = subBuilder;
            break;
          }
          case 90: {
            global::Envoy.Config.Core.V3.HealthCheck.Types.GrpcHealthCheck subBuilder = new global::Envoy.Config.Core.V3.HealthCheck.Types.GrpcHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck) {
              subBuilder.MergeFrom(GrpcHealthCheck);
            }
            input.ReadMessage(subBuilder);
            GrpcHealthCheck = subBuilder;
            break;
          }
          case 98: {
            if (noTrafficInterval_ == null) {
              NoTrafficInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(NoTrafficInterval);
            break;
          }
          case 106: {
            global::Envoy.Config.Core.V3.HealthCheck.Types.CustomHealthCheck subBuilder = new global::Envoy.Config.Core.V3.HealthCheck.Types.CustomHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck) {
              subBuilder.MergeFrom(CustomHealthCheck);
            }
            input.ReadMessage(subBuilder);
            CustomHealthCheck = subBuilder;
            break;
          }
          case 114: {
            if (unhealthyInterval_ == null) {
              UnhealthyInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(UnhealthyInterval);
            break;
          }
          case 122: {
            if (unhealthyEdgeInterval_ == null) {
              UnhealthyEdgeInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(UnhealthyEdgeInterval);
            break;
          }
          case 130: {
            if (healthyEdgeInterval_ == null) {
              HealthyEdgeInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(HealthyEdgeInterval);
            break;
          }
          case 138: {
            EventLogPath = input.ReadString();
            break;
          }
          case 144: {
            IntervalJitterPercent = input.ReadUInt32();
            break;
          }
          case 152: {
            AlwaysLogHealthCheckFailures = input.ReadBool();
            break;
          }
          case 162: {
            if (initialJitter_ == null) {
              InitialJitter = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(InitialJitter);
            break;
          }
          case 170: {
            if (tlsOptions_ == null) {
              TlsOptions = new global::Envoy.Config.Core.V3.HealthCheck.Types.TlsOptions();
            }
            input.ReadMessage(TlsOptions);
            break;
          }
          case 178: {
            if (eventService_ == null) {
              EventService = new global::Envoy.Config.Core.V3.EventServiceConfig();
            }
            input.ReadMessage(EventService);
            break;
          }
          case 186: {
            if (transportSocketMatchCriteria_ == null) {
              TransportSocketMatchCriteria = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(TransportSocketMatchCriteria);
            break;
          }
          case 194: {
            if (noTrafficHealthyInterval_ == null) {
              NoTrafficHealthyInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(NoTrafficHealthyInterval);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (timeout_ == null) {
              Timeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Timeout);
            break;
          }
          case 18: {
            if (interval_ == null) {
              Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 26: {
            if (intervalJitter_ == null) {
              IntervalJitter = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(IntervalJitter);
            break;
          }
          case 34: {
            uint? value = _single_unhealthyThreshold_codec.Read(ref input);
            if (unhealthyThreshold_ == null || value != 0) {
              UnhealthyThreshold = value;
            }
            break;
          }
          case 42: {
            uint? value = _single_healthyThreshold_codec.Read(ref input);
            if (healthyThreshold_ == null || value != 0) {
              HealthyThreshold = value;
            }
            break;
          }
          case 50: {
            uint? value = _single_altPort_codec.Read(ref input);
            if (altPort_ == null || value != 0) {
              AltPort = value;
            }
            break;
          }
          case 58: {
            bool? value = _single_reuseConnection_codec.Read(ref input);
            if (reuseConnection_ == null || value != false) {
              ReuseConnection = value;
            }
            break;
          }
          case 66: {
            global::Envoy.Config.Core.V3.HealthCheck.Types.HttpHealthCheck subBuilder = new global::Envoy.Config.Core.V3.HealthCheck.Types.HttpHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck) {
              subBuilder.MergeFrom(HttpHealthCheck);
            }
            input.ReadMessage(subBuilder);
            HttpHealthCheck = subBuilder;
            break;
          }
          case 74: {
            global::Envoy.Config.Core.V3.HealthCheck.Types.TcpHealthCheck subBuilder = new global::Envoy.Config.Core.V3.HealthCheck.Types.TcpHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck) {
              subBuilder.MergeFrom(TcpHealthCheck);
            }
            input.ReadMessage(subBuilder);
            TcpHealthCheck = subBuilder;
            break;
          }
          case 90: {
            global::Envoy.Config.Core.V3.HealthCheck.Types.GrpcHealthCheck subBuilder = new global::Envoy.Config.Core.V3.HealthCheck.Types.GrpcHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck) {
              subBuilder.MergeFrom(GrpcHealthCheck);
            }
            input.ReadMessage(subBuilder);
            GrpcHealthCheck = subBuilder;
            break;
          }
          case 98: {
            if (noTrafficInterval_ == null) {
              NoTrafficInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(NoTrafficInterval);
            break;
          }
          case 106: {
            global::Envoy.Config.Core.V3.HealthCheck.Types.CustomHealthCheck subBuilder = new global::Envoy.Config.Core.V3.HealthCheck.Types.CustomHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck) {
              subBuilder.MergeFrom(CustomHealthCheck);
            }
            input.ReadMessage(subBuilder);
            CustomHealthCheck = subBuilder;
            break;
          }
          case 114: {
            if (unhealthyInterval_ == null) {
              UnhealthyInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(UnhealthyInterval);
            break;
          }
          case 122: {
            if (unhealthyEdgeInterval_ == null) {
              UnhealthyEdgeInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(UnhealthyEdgeInterval);
            break;
          }
          case 130: {
            if (healthyEdgeInterval_ == null) {
              HealthyEdgeInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(HealthyEdgeInterval);
            break;
          }
          case 138: {
            EventLogPath = input.ReadString();
            break;
          }
          case 144: {
            IntervalJitterPercent = input.ReadUInt32();
            break;
          }
          case 152: {
            AlwaysLogHealthCheckFailures = input.ReadBool();
            break;
          }
          case 162: {
            if (initialJitter_ == null) {
              InitialJitter = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(InitialJitter);
            break;
          }
          case 170: {
            if (tlsOptions_ == null) {
              TlsOptions = new global::Envoy.Config.Core.V3.HealthCheck.Types.TlsOptions();
            }
            input.ReadMessage(TlsOptions);
            break;
          }
          case 178: {
            if (eventService_ == null) {
              EventService = new global::Envoy.Config.Core.V3.EventServiceConfig();
            }
            input.ReadMessage(EventService);
            break;
          }
          case 186: {
            if (transportSocketMatchCriteria_ == null) {
              TransportSocketMatchCriteria = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(TransportSocketMatchCriteria);
            break;
          }
          case 194: {
            if (noTrafficHealthyInterval_ == null) {
              NoTrafficHealthyInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(NoTrafficHealthyInterval);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the HealthCheck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Describes the encoding of the payload bytes in the payload.
      /// </summary>
      public sealed partial class Payload : pb::IMessage<Payload>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Payload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Core.V3.HealthCheck.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Payload() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Payload(Payload other) : this() {
          switch (other.PayloadCase) {
            case PayloadOneofCase.Text:
              Text = other.Text;
              break;
            case PayloadOneofCase.Binary:
              Binary = other.Binary;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Payload Clone() {
          return new Payload(this);
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 1;
        /// <summary>
        /// Hex encoded payload. E.g., "000000FF".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Text {
          get { return payloadCase_ == PayloadOneofCase.Text ? (string) payload_ : ""; }
          set {
            payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            payloadCase_ = PayloadOneofCase.Text;
          }
        }

        /// <summary>Field number for the "binary" field.</summary>
        public const int BinaryFieldNumber = 2;
        /// <summary>
        /// Binary payload.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pb::ByteString Binary {
          get { return payloadCase_ == PayloadOneofCase.Binary ? (pb::ByteString) payload_ : pb::ByteString.Empty; }
          set {
            payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            payloadCase_ = PayloadOneofCase.Binary;
          }
        }

        private object payload_;
        /// <summary>Enum of possible cases for the "payload" oneof.</summary>
        public enum PayloadOneofCase {
          None = 0,
          Text = 1,
          Binary = 2,
        }
        private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PayloadOneofCase PayloadCase {
          get { return payloadCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPayload() {
          payloadCase_ = PayloadOneofCase.None;
          payload_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Payload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Payload other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Text != other.Text) return false;
          if (Binary != other.Binary) return false;
          if (PayloadCase != other.PayloadCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (payloadCase_ == PayloadOneofCase.Text) hash ^= Text.GetHashCode();
          if (payloadCase_ == PayloadOneofCase.Binary) hash ^= Binary.GetHashCode();
          hash ^= (int) payloadCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (payloadCase_ == PayloadOneofCase.Text) {
            output.WriteRawTag(10);
            output.WriteString(Text);
          }
          if (payloadCase_ == PayloadOneofCase.Binary) {
            output.WriteRawTag(18);
            output.WriteBytes(Binary);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (payloadCase_ == PayloadOneofCase.Text) {
            output.WriteRawTag(10);
            output.WriteString(Text);
          }
          if (payloadCase_ == PayloadOneofCase.Binary) {
            output.WriteRawTag(18);
            output.WriteBytes(Binary);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (payloadCase_ == PayloadOneofCase.Text) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          if (payloadCase_ == PayloadOneofCase.Binary) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Binary);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Payload other) {
          if (other == null) {
            return;
          }
          switch (other.PayloadCase) {
            case PayloadOneofCase.Text:
              Text = other.Text;
              break;
            case PayloadOneofCase.Binary:
              Binary = other.Binary;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Text = input.ReadString();
                break;
              }
              case 18: {
                Binary = input.ReadBytes();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Text = input.ReadString();
                break;
              }
              case 18: {
                Binary = input.ReadBytes();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// [#next-free-field: 15]
      /// </summary>
      public sealed partial class HttpHealthCheck : pb::IMessage<HttpHealthCheck>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<HttpHealthCheck> _parser = new pb::MessageParser<HttpHealthCheck>(() => new HttpHealthCheck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<HttpHealthCheck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Core.V3.HealthCheck.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public HttpHealthCheck() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public HttpHealthCheck(HttpHealthCheck other) : this() {
          host_ = other.host_;
          path_ = other.path_;
          send_ = other.send_ != null ? other.send_.Clone() : null;
          receive_ = other.receive_.Clone();
          ResponseBufferSize = other.ResponseBufferSize;
          requestHeadersToAdd_ = other.requestHeadersToAdd_.Clone();
          requestHeadersToRemove_ = other.requestHeadersToRemove_.Clone();
          expectedStatuses_ = other.expectedStatuses_.Clone();
          retriableStatuses_ = other.retriableStatuses_.Clone();
          codecClientType_ = other.codecClientType_;
          serviceNameMatcher_ = other.serviceNameMatcher_ != null ? other.serviceNameMatcher_.Clone() : null;
          method_ = other.method_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public HttpHealthCheck Clone() {
          return new HttpHealthCheck(this);
        }

        /// <summary>Field number for the "host" field.</summary>
        public const int HostFieldNumber = 1;
        private string host_ = "";
        /// <summary>
        /// The value of the host header in the HTTP health check request. If
        /// left empty (default value), the name of the cluster this health check is associated
        /// with will be used. The host header can be customized for a specific endpoint by setting the
        /// :ref:`hostname &lt;envoy_v3_api_field_config.endpoint.v3.Endpoint.HealthCheckConfig.hostname>` field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Host {
          get { return host_; }
          set {
            host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 2;
        private string path_ = "";
        /// <summary>
        /// Specifies the HTTP path that will be requested during health checking. For example
        /// ``/healthcheck``.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "send" field.</summary>
        public const int SendFieldNumber = 3;
        private global::Envoy.Config.Core.V3.HealthCheck.Types.Payload send_;
        /// <summary>
        /// [#not-implemented-hide:] HTTP specific payload.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.HealthCheck.Types.Payload Send {
          get { return send_; }
          set {
            send_ = value;
          }
        }

        /// <summary>Field number for the "receive" field.</summary>
        public const int ReceiveFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Envoy.Config.Core.V3.HealthCheck.Types.Payload> _repeated_receive_codec
            = pb::FieldCodec.ForMessage(34, global::Envoy.Config.Core.V3.HealthCheck.Types.Payload.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Config.Core.V3.HealthCheck.Types.Payload> receive_ = new pbc::RepeatedField<global::Envoy.Config.Core.V3.HealthCheck.Types.Payload>();
        /// <summary>
        /// Specifies a list of HTTP expected responses to match in the first ``response_buffer_size`` bytes of the response body.
        /// If it is set, both the expected response check and status code determine the health check.
        /// When checking the response, “fuzzy” matching is performed such that each payload block must be found,
        /// and in the order specified, but not necessarily contiguous.
        ///
        /// .. note::
        ///
        ///   It is recommended to set ``response_buffer_size`` based on the total Payload size for efficiency.
        ///   The default buffer size is 1024 bytes when it is not set.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Envoy.Config.Core.V3.HealthCheck.Types.Payload> Receive {
          get { return receive_; }
        }

        /// <summary>Field number for the "response_buffer_size" field.</summary>
        public const int ResponseBufferSizeFieldNumber = 14;
        private static readonly pb::FieldCodec<ulong?> _single_responseBufferSize_codec = pb::FieldCodec.ForStructWrapper<ulong>(114);
        private ulong? responseBufferSize_;
        /// <summary>
        /// Specifies the size of response buffer in bytes that is used to Payload match.
        /// The default value is 1024. Setting to 0 implies that the Payload will be matched against the entire response.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong? ResponseBufferSize {
          get { return responseBufferSize_; }
          set {
            responseBufferSize_ = value;
          }
        }


        /// <summary>Field number for the "request_headers_to_add" field.</summary>
        public const int RequestHeadersToAddFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Envoy.Config.Core.V3.HeaderValueOption> _repeated_requestHeadersToAdd_codec
            = pb::FieldCodec.ForMessage(50, global::Envoy.Config.Core.V3.HeaderValueOption.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption> requestHeadersToAdd_ = new pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption>();
        /// <summary>
        /// Specifies a list of HTTP headers that should be added to each request that is sent to the
        /// health checked cluster. For more information, including details on header value syntax, see
        /// the documentation on :ref:`custom request headers
        /// &lt;config_http_conn_man_headers_custom_request_headers>`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption> RequestHeadersToAdd {
          get { return requestHeadersToAdd_; }
        }

        /// <summary>Field number for the "request_headers_to_remove" field.</summary>
        public const int RequestHeadersToRemoveFieldNumber = 8;
        private static readonly pb::FieldCodec<string> _repeated_requestHeadersToRemove_codec
            = pb::FieldCodec.ForString(66);
        private readonly pbc::RepeatedField<string> requestHeadersToRemove_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Specifies a list of HTTP headers that should be removed from each request that is sent to the
        /// health checked cluster.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> RequestHeadersToRemove {
          get { return requestHeadersToRemove_; }
        }

        /// <summary>Field number for the "expected_statuses" field.</summary>
        public const int ExpectedStatusesFieldNumber = 9;
        private static readonly pb::FieldCodec<global::Envoy.Type.V3.Int64Range> _repeated_expectedStatuses_codec
            = pb::FieldCodec.ForMessage(74, global::Envoy.Type.V3.Int64Range.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Type.V3.Int64Range> expectedStatuses_ = new pbc::RepeatedField<global::Envoy.Type.V3.Int64Range>();
        /// <summary>
        /// Specifies a list of HTTP response statuses considered healthy. If provided, replaces default
        /// 200-only policy - 200 must be included explicitly as needed. Ranges follow half-open
        /// semantics of :ref:`Int64Range &lt;envoy_v3_api_msg_type.v3.Int64Range>`. The start and end of each
        /// range are required. Only statuses in the range [100, 600) are allowed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Envoy.Type.V3.Int64Range> ExpectedStatuses {
          get { return expectedStatuses_; }
        }

        /// <summary>Field number for the "retriable_statuses" field.</summary>
        public const int RetriableStatusesFieldNumber = 12;
        private static readonly pb::FieldCodec<global::Envoy.Type.V3.Int64Range> _repeated_retriableStatuses_codec
            = pb::FieldCodec.ForMessage(98, global::Envoy.Type.V3.Int64Range.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Type.V3.Int64Range> retriableStatuses_ = new pbc::RepeatedField<global::Envoy.Type.V3.Int64Range>();
        /// <summary>
        /// Specifies a list of HTTP response statuses considered retriable. If provided, responses in this range
        /// will count towards the configured :ref:`unhealthy_threshold &lt;envoy_v3_api_field_config.core.v3.HealthCheck.unhealthy_threshold>`,
        /// but will not result in the host being considered immediately unhealthy. Ranges follow half-open semantics of
        /// :ref:`Int64Range &lt;envoy_v3_api_msg_type.v3.Int64Range>`. The start and end of each range are required.
        /// Only statuses in the range [100, 600) are allowed. The :ref:`expected_statuses &lt;envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.expected_statuses>`
        /// field takes precedence for any range overlaps with this field i.e. if status code 200 is both retriable and expected, a 200 response will
        /// be considered a successful health check. By default all responses not in
        /// :ref:`expected_statuses &lt;envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.expected_statuses>` will result in
        /// the host being considered immediately unhealthy i.e. if status code 200 is expected and there are no configured retriable statuses, any
        /// non-200 response will result in the host being marked unhealthy.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Envoy.Type.V3.Int64Range> RetriableStatuses {
          get { return retriableStatuses_; }
        }

        /// <summary>Field number for the "codec_client_type" field.</summary>
        public const int CodecClientTypeFieldNumber = 10;
        private global::Envoy.Type.V3.CodecClientType codecClientType_ = global::Envoy.Type.V3.CodecClientType.Http1;
        /// <summary>
        /// Use specified application protocol for health checks.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Type.V3.CodecClientType CodecClientType {
          get { return codecClientType_; }
          set {
            codecClientType_ = value;
          }
        }

        /// <summary>Field number for the "service_name_matcher" field.</summary>
        public const int ServiceNameMatcherFieldNumber = 11;
        private global::Envoy.Type.Matcher.V3.StringMatcher serviceNameMatcher_;
        /// <summary>
        /// An optional service name parameter which is used to validate the identity of
        /// the health checked cluster using a :ref:`StringMatcher
        /// &lt;envoy_v3_api_msg_type.matcher.v3.StringMatcher>`. See the :ref:`architecture overview
        /// &lt;arch_overview_health_checking_identity>` for more information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Type.Matcher.V3.StringMatcher ServiceNameMatcher {
          get { return serviceNameMatcher_; }
          set {
            serviceNameMatcher_ = value;
          }
        }

        /// <summary>Field number for the "method" field.</summary>
        public const int MethodFieldNumber = 13;
        private global::Envoy.Config.Core.V3.RequestMethod method_ = global::Envoy.Config.Core.V3.RequestMethod.MethodUnspecified;
        /// <summary>
        /// HTTP Method that will be used for health checking, default is "GET".
        /// GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PATCH methods are supported, but making request body is not supported.
        /// CONNECT method is disallowed because it is not appropriate for health check request.
        /// If a non-200 response is expected by the method, it needs to be set in :ref:`expected_statuses &lt;envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.expected_statuses>`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.RequestMethod Method {
          get { return method_; }
          set {
            method_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as HttpHealthCheck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(HttpHealthCheck other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Host != other.Host) return false;
          if (Path != other.Path) return false;
          if (!object.Equals(Send, other.Send)) return false;
          if(!receive_.Equals(other.receive_)) return false;
          if (ResponseBufferSize != other.ResponseBufferSize) return false;
          if(!requestHeadersToAdd_.Equals(other.requestHeadersToAdd_)) return false;
          if(!requestHeadersToRemove_.Equals(other.requestHeadersToRemove_)) return false;
          if(!expectedStatuses_.Equals(other.expectedStatuses_)) return false;
          if(!retriableStatuses_.Equals(other.retriableStatuses_)) return false;
          if (CodecClientType != other.CodecClientType) return false;
          if (!object.Equals(ServiceNameMatcher, other.ServiceNameMatcher)) return false;
          if (Method != other.Method) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Host.Length != 0) hash ^= Host.GetHashCode();
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (send_ != null) hash ^= Send.GetHashCode();
          hash ^= receive_.GetHashCode();
          if (responseBufferSize_ != null) hash ^= ResponseBufferSize.GetHashCode();
          hash ^= requestHeadersToAdd_.GetHashCode();
          hash ^= requestHeadersToRemove_.GetHashCode();
          hash ^= expectedStatuses_.GetHashCode();
          hash ^= retriableStatuses_.GetHashCode();
          if (CodecClientType != global::Envoy.Type.V3.CodecClientType.Http1) hash ^= CodecClientType.GetHashCode();
          if (serviceNameMatcher_ != null) hash ^= ServiceNameMatcher.GetHashCode();
          if (Method != global::Envoy.Config.Core.V3.RequestMethod.MethodUnspecified) hash ^= Method.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Host.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Host);
          }
          if (Path.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Path);
          }
          if (send_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Send);
          }
          receive_.WriteTo(output, _repeated_receive_codec);
          requestHeadersToAdd_.WriteTo(output, _repeated_requestHeadersToAdd_codec);
          requestHeadersToRemove_.WriteTo(output, _repeated_requestHeadersToRemove_codec);
          expectedStatuses_.WriteTo(output, _repeated_expectedStatuses_codec);
          if (CodecClientType != global::Envoy.Type.V3.CodecClientType.Http1) {
            output.WriteRawTag(80);
            output.WriteEnum((int) CodecClientType);
          }
          if (serviceNameMatcher_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(ServiceNameMatcher);
          }
          retriableStatuses_.WriteTo(output, _repeated_retriableStatuses_codec);
          if (Method != global::Envoy.Config.Core.V3.RequestMethod.MethodUnspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) Method);
          }
          if (responseBufferSize_ != null) {
            _single_responseBufferSize_codec.WriteTagAndValue(output, ResponseBufferSize);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Host.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Host);
          }
          if (Path.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Path);
          }
          if (send_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Send);
          }
          receive_.WriteTo(ref output, _repeated_receive_codec);
          requestHeadersToAdd_.WriteTo(ref output, _repeated_requestHeadersToAdd_codec);
          requestHeadersToRemove_.WriteTo(ref output, _repeated_requestHeadersToRemove_codec);
          expectedStatuses_.WriteTo(ref output, _repeated_expectedStatuses_codec);
          if (CodecClientType != global::Envoy.Type.V3.CodecClientType.Http1) {
            output.WriteRawTag(80);
            output.WriteEnum((int) CodecClientType);
          }
          if (serviceNameMatcher_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(ServiceNameMatcher);
          }
          retriableStatuses_.WriteTo(ref output, _repeated_retriableStatuses_codec);
          if (Method != global::Envoy.Config.Core.V3.RequestMethod.MethodUnspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) Method);
          }
          if (responseBufferSize_ != null) {
            _single_responseBufferSize_codec.WriteTagAndValue(ref output, ResponseBufferSize);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Host.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
          }
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (send_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Send);
          }
          size += receive_.CalculateSize(_repeated_receive_codec);
          if (responseBufferSize_ != null) {
            size += _single_responseBufferSize_codec.CalculateSizeWithTag(ResponseBufferSize);
          }
          size += requestHeadersToAdd_.CalculateSize(_repeated_requestHeadersToAdd_codec);
          size += requestHeadersToRemove_.CalculateSize(_repeated_requestHeadersToRemove_codec);
          size += expectedStatuses_.CalculateSize(_repeated_expectedStatuses_codec);
          size += retriableStatuses_.CalculateSize(_repeated_retriableStatuses_codec);
          if (CodecClientType != global::Envoy.Type.V3.CodecClientType.Http1) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CodecClientType);
          }
          if (serviceNameMatcher_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceNameMatcher);
          }
          if (Method != global::Envoy.Config.Core.V3.RequestMethod.MethodUnspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Method);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(HttpHealthCheck other) {
          if (other == null) {
            return;
          }
          if (other.Host.Length != 0) {
            Host = other.Host;
          }
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          if (other.send_ != null) {
            if (send_ == null) {
              Send = new global::Envoy.Config.Core.V3.HealthCheck.Types.Payload();
            }
            Send.MergeFrom(other.Send);
          }
          receive_.Add(other.receive_);
          if (other.responseBufferSize_ != null) {
            if (responseBufferSize_ == null || other.ResponseBufferSize != 0UL) {
              ResponseBufferSize = other.ResponseBufferSize;
            }
          }
          requestHeadersToAdd_.Add(other.requestHeadersToAdd_);
          requestHeadersToRemove_.Add(other.requestHeadersToRemove_);
          expectedStatuses_.Add(other.expectedStatuses_);
          retriableStatuses_.Add(other.retriableStatuses_);
          if (other.CodecClientType != global::Envoy.Type.V3.CodecClientType.Http1) {
            CodecClientType = other.CodecClientType;
          }
          if (other.serviceNameMatcher_ != null) {
            if (serviceNameMatcher_ == null) {
              ServiceNameMatcher = new global::Envoy.Type.Matcher.V3.StringMatcher();
            }
            ServiceNameMatcher.MergeFrom(other.ServiceNameMatcher);
          }
          if (other.Method != global::Envoy.Config.Core.V3.RequestMethod.MethodUnspecified) {
            Method = other.Method;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Host = input.ReadString();
                break;
              }
              case 18: {
                Path = input.ReadString();
                break;
              }
              case 26: {
                if (send_ == null) {
                  Send = new global::Envoy.Config.Core.V3.HealthCheck.Types.Payload();
                }
                input.ReadMessage(Send);
                break;
              }
              case 34: {
                receive_.AddEntriesFrom(input, _repeated_receive_codec);
                break;
              }
              case 50: {
                requestHeadersToAdd_.AddEntriesFrom(input, _repeated_requestHeadersToAdd_codec);
                break;
              }
              case 66: {
                requestHeadersToRemove_.AddEntriesFrom(input, _repeated_requestHeadersToRemove_codec);
                break;
              }
              case 74: {
                expectedStatuses_.AddEntriesFrom(input, _repeated_expectedStatuses_codec);
                break;
              }
              case 80: {
                CodecClientType = (global::Envoy.Type.V3.CodecClientType) input.ReadEnum();
                break;
              }
              case 90: {
                if (serviceNameMatcher_ == null) {
                  ServiceNameMatcher = new global::Envoy.Type.Matcher.V3.StringMatcher();
                }
                input.ReadMessage(ServiceNameMatcher);
                break;
              }
              case 98: {
                retriableStatuses_.AddEntriesFrom(input, _repeated_retriableStatuses_codec);
                break;
              }
              case 104: {
                Method = (global::Envoy.Config.Core.V3.RequestMethod) input.ReadEnum();
                break;
              }
              case 114: {
                ulong? value = _single_responseBufferSize_codec.Read(input);
                if (responseBufferSize_ == null || value != 0UL) {
                  ResponseBufferSize = value;
                }
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Host = input.ReadString();
                break;
              }
              case 18: {
                Path = input.ReadString();
                break;
              }
              case 26: {
                if (send_ == null) {
                  Send = new global::Envoy.Config.Core.V3.HealthCheck.Types.Payload();
                }
                input.ReadMessage(Send);
                break;
              }
              case 34: {
                receive_.AddEntriesFrom(ref input, _repeated_receive_codec);
                break;
              }
              case 50: {
                requestHeadersToAdd_.AddEntriesFrom(ref input, _repeated_requestHeadersToAdd_codec);
                break;
              }
              case 66: {
                requestHeadersToRemove_.AddEntriesFrom(ref input, _repeated_requestHeadersToRemove_codec);
                break;
              }
              case 74: {
                expectedStatuses_.AddEntriesFrom(ref input, _repeated_expectedStatuses_codec);
                break;
              }
              case 80: {
                CodecClientType = (global::Envoy.Type.V3.CodecClientType) input.ReadEnum();
                break;
              }
              case 90: {
                if (serviceNameMatcher_ == null) {
                  ServiceNameMatcher = new global::Envoy.Type.Matcher.V3.StringMatcher();
                }
                input.ReadMessage(ServiceNameMatcher);
                break;
              }
              case 98: {
                retriableStatuses_.AddEntriesFrom(ref input, _repeated_retriableStatuses_codec);
                break;
              }
              case 104: {
                Method = (global::Envoy.Config.Core.V3.RequestMethod) input.ReadEnum();
                break;
              }
              case 114: {
                ulong? value = _single_responseBufferSize_codec.Read(ref input);
                if (responseBufferSize_ == null || value != 0UL) {
                  ResponseBufferSize = value;
                }
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class TcpHealthCheck : pb::IMessage<TcpHealthCheck>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TcpHealthCheck> _parser = new pb::MessageParser<TcpHealthCheck>(() => new TcpHealthCheck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<TcpHealthCheck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Core.V3.HealthCheck.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TcpHealthCheck() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TcpHealthCheck(TcpHealthCheck other) : this() {
          send_ = other.send_ != null ? other.send_.Clone() : null;
          receive_ = other.receive_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TcpHealthCheck Clone() {
          return new TcpHealthCheck(this);
        }

        /// <summary>Field number for the "send" field.</summary>
        public const int SendFieldNumber = 1;
        private global::Envoy.Config.Core.V3.HealthCheck.Types.Payload send_;
        /// <summary>
        /// Empty payloads imply a connect-only health check.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.HealthCheck.Types.Payload Send {
          get { return send_; }
          set {
            send_ = value;
          }
        }

        /// <summary>Field number for the "receive" field.</summary>
        public const int ReceiveFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Envoy.Config.Core.V3.HealthCheck.Types.Payload> _repeated_receive_codec
            = pb::FieldCodec.ForMessage(18, global::Envoy.Config.Core.V3.HealthCheck.Types.Payload.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Config.Core.V3.HealthCheck.Types.Payload> receive_ = new pbc::RepeatedField<global::Envoy.Config.Core.V3.HealthCheck.Types.Payload>();
        /// <summary>
        /// When checking the response, “fuzzy” matching is performed such that each
        /// payload block must be found, and in the order specified, but not
        /// necessarily contiguous.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Envoy.Config.Core.V3.HealthCheck.Types.Payload> Receive {
          get { return receive_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as TcpHealthCheck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(TcpHealthCheck other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Send, other.Send)) return false;
          if(!receive_.Equals(other.receive_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (send_ != null) hash ^= Send.GetHashCode();
          hash ^= receive_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (send_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Send);
          }
          receive_.WriteTo(output, _repeated_receive_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (send_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Send);
          }
          receive_.WriteTo(ref output, _repeated_receive_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (send_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Send);
          }
          size += receive_.CalculateSize(_repeated_receive_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(TcpHealthCheck other) {
          if (other == null) {
            return;
          }
          if (other.send_ != null) {
            if (send_ == null) {
              Send = new global::Envoy.Config.Core.V3.HealthCheck.Types.Payload();
            }
            Send.MergeFrom(other.Send);
          }
          receive_.Add(other.receive_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (send_ == null) {
                  Send = new global::Envoy.Config.Core.V3.HealthCheck.Types.Payload();
                }
                input.ReadMessage(Send);
                break;
              }
              case 18: {
                receive_.AddEntriesFrom(input, _repeated_receive_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (send_ == null) {
                  Send = new global::Envoy.Config.Core.V3.HealthCheck.Types.Payload();
                }
                input.ReadMessage(Send);
                break;
              }
              case 18: {
                receive_.AddEntriesFrom(ref input, _repeated_receive_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class RedisHealthCheck : pb::IMessage<RedisHealthCheck>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RedisHealthCheck> _parser = new pb::MessageParser<RedisHealthCheck>(() => new RedisHealthCheck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<RedisHealthCheck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Core.V3.HealthCheck.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public RedisHealthCheck() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public RedisHealthCheck(RedisHealthCheck other) : this() {
          key_ = other.key_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public RedisHealthCheck Clone() {
          return new RedisHealthCheck(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        /// <summary>
        /// If set, optionally perform ``EXISTS &lt;key>`` instead of ``PING``. A return value
        /// from Redis of 0 (does not exist) is considered a passing healthcheck. A return value other
        /// than 0 is considered a failure. This allows the user to mark a Redis instance for maintenance
        /// by setting the specified key to any value and waiting for traffic to drain.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as RedisHealthCheck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(RedisHealthCheck other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(RedisHealthCheck other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// `grpc.health.v1.Health
      /// &lt;https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto>`_-based
      /// healthcheck. See `gRPC doc &lt;https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_
      /// for details.
      /// </summary>
      public sealed partial class GrpcHealthCheck : pb::IMessage<GrpcHealthCheck>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GrpcHealthCheck> _parser = new pb::MessageParser<GrpcHealthCheck>(() => new GrpcHealthCheck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<GrpcHealthCheck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Core.V3.HealthCheck.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GrpcHealthCheck() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GrpcHealthCheck(GrpcHealthCheck other) : this() {
          serviceName_ = other.serviceName_;
          authority_ = other.authority_;
          initialMetadata_ = other.initialMetadata_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GrpcHealthCheck Clone() {
          return new GrpcHealthCheck(this);
        }

        /// <summary>Field number for the "service_name" field.</summary>
        public const int ServiceNameFieldNumber = 1;
        private string serviceName_ = "";
        /// <summary>
        /// An optional service name parameter which will be sent to gRPC service in
        /// `grpc.health.v1.HealthCheckRequest
        /// &lt;https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto#L20>`_.
        /// message. See `gRPC health-checking overview
        /// &lt;https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_ for more information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ServiceName {
          get { return serviceName_; }
          set {
            serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "authority" field.</summary>
        public const int AuthorityFieldNumber = 2;
        private string authority_ = "";
        /// <summary>
        /// The value of the :authority header in the gRPC health check request. If
        /// left empty (default value), the name of the cluster this health check is associated
        /// with will be used. The authority header can be customized for a specific endpoint by setting
        /// the :ref:`hostname &lt;envoy_v3_api_field_config.endpoint.v3.Endpoint.HealthCheckConfig.hostname>` field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Authority {
          get { return authority_; }
          set {
            authority_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "initial_metadata" field.</summary>
        public const int InitialMetadataFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Envoy.Config.Core.V3.HeaderValueOption> _repeated_initialMetadata_codec
            = pb::FieldCodec.ForMessage(26, global::Envoy.Config.Core.V3.HeaderValueOption.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption> initialMetadata_ = new pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption>();
        /// <summary>
        /// Specifies a list of key-value pairs that should be added to the metadata of each GRPC call
        /// that is sent to the health checked cluster. For more information, including details on header value syntax,
        /// see the documentation on :ref:`custom request headers
        /// &lt;config_http_conn_man_headers_custom_request_headers>`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption> InitialMetadata {
          get { return initialMetadata_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as GrpcHealthCheck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(GrpcHealthCheck other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ServiceName != other.ServiceName) return false;
          if (Authority != other.Authority) return false;
          if(!initialMetadata_.Equals(other.initialMetadata_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
          if (Authority.Length != 0) hash ^= Authority.GetHashCode();
          hash ^= initialMetadata_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ServiceName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ServiceName);
          }
          if (Authority.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Authority);
          }
          initialMetadata_.WriteTo(output, _repeated_initialMetadata_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ServiceName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ServiceName);
          }
          if (Authority.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Authority);
          }
          initialMetadata_.WriteTo(ref output, _repeated_initialMetadata_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ServiceName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
          }
          if (Authority.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Authority);
          }
          size += initialMetadata_.CalculateSize(_repeated_initialMetadata_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(GrpcHealthCheck other) {
          if (other == null) {
            return;
          }
          if (other.ServiceName.Length != 0) {
            ServiceName = other.ServiceName;
          }
          if (other.Authority.Length != 0) {
            Authority = other.Authority;
          }
          initialMetadata_.Add(other.initialMetadata_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ServiceName = input.ReadString();
                break;
              }
              case 18: {
                Authority = input.ReadString();
                break;
              }
              case 26: {
                initialMetadata_.AddEntriesFrom(input, _repeated_initialMetadata_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                ServiceName = input.ReadString();
                break;
              }
              case 18: {
                Authority = input.ReadString();
                break;
              }
              case 26: {
                initialMetadata_.AddEntriesFrom(ref input, _repeated_initialMetadata_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Custom health check.
      /// </summary>
      public sealed partial class CustomHealthCheck : pb::IMessage<CustomHealthCheck>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CustomHealthCheck> _parser = new pb::MessageParser<CustomHealthCheck>(() => new CustomHealthCheck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<CustomHealthCheck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Core.V3.HealthCheck.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CustomHealthCheck() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CustomHealthCheck(CustomHealthCheck other) : this() {
          name_ = other.name_;
          switch (other.ConfigTypeCase) {
            case ConfigTypeOneofCase.TypedConfig:
              TypedConfig = other.TypedConfig.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CustomHealthCheck Clone() {
          return new CustomHealthCheck(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// The registered name of the custom health checker.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "typed_config" field.</summary>
        public const int TypedConfigFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Any TypedConfig {
          get { return configTypeCase_ == ConfigTypeOneofCase.TypedConfig ? (global::Google.Protobuf.WellKnownTypes.Any) configType_ : null; }
          set {
            configType_ = value;
            configTypeCase_ = value == null ? ConfigTypeOneofCase.None : ConfigTypeOneofCase.TypedConfig;
          }
        }

        private object configType_;
        /// <summary>Enum of possible cases for the "config_type" oneof.</summary>
        public enum ConfigTypeOneofCase {
          None = 0,
          TypedConfig = 3,
        }
        private ConfigTypeOneofCase configTypeCase_ = ConfigTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConfigTypeOneofCase ConfigTypeCase {
          get { return configTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearConfigType() {
          configTypeCase_ = ConfigTypeOneofCase.None;
          configType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as CustomHealthCheck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(CustomHealthCheck other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!object.Equals(TypedConfig, other.TypedConfig)) return false;
          if (ConfigTypeCase != other.ConfigTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) hash ^= TypedConfig.GetHashCode();
          hash ^= (int) configTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
            output.WriteRawTag(26);
            output.WriteMessage(TypedConfig);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
            output.WriteRawTag(26);
            output.WriteMessage(TypedConfig);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypedConfig);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(CustomHealthCheck other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          switch (other.ConfigTypeCase) {
            case ConfigTypeOneofCase.TypedConfig:
              if (TypedConfig == null) {
                TypedConfig = new global::Google.Protobuf.WellKnownTypes.Any();
              }
              TypedConfig.MergeFrom(other.TypedConfig);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
                if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
                  subBuilder.MergeFrom(TypedConfig);
                }
                input.ReadMessage(subBuilder);
                TypedConfig = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
                if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
                  subBuilder.MergeFrom(TypedConfig);
                }
                input.ReadMessage(subBuilder);
                TypedConfig = subBuilder;
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Health checks occur over the transport socket specified for the cluster. This implies that if a
      /// cluster is using a TLS-enabled transport socket, the health check will also occur over TLS.
      ///
      /// This allows overriding the cluster TLS settings, just for health check connections.
      /// </summary>
      public sealed partial class TlsOptions : pb::IMessage<TlsOptions>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TlsOptions> _parser = new pb::MessageParser<TlsOptions>(() => new TlsOptions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<TlsOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Core.V3.HealthCheck.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TlsOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TlsOptions(TlsOptions other) : this() {
          alpnProtocols_ = other.alpnProtocols_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TlsOptions Clone() {
          return new TlsOptions(this);
        }

        /// <summary>Field number for the "alpn_protocols" field.</summary>
        public const int AlpnProtocolsFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_alpnProtocols_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> alpnProtocols_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Specifies the ALPN protocols for health check connections. This is useful if the
        /// corresponding upstream is using ALPN-based :ref:`FilterChainMatch
        /// &lt;envoy_v3_api_msg_config.listener.v3.FilterChainMatch>` along with different protocols for health checks
        /// versus data connections. If empty, no ALPN protocols will be set on health check connections.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> AlpnProtocols {
          get { return alpnProtocols_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as TlsOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(TlsOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!alpnProtocols_.Equals(other.alpnProtocols_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= alpnProtocols_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          alpnProtocols_.WriteTo(output, _repeated_alpnProtocols_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          alpnProtocols_.WriteTo(ref output, _repeated_alpnProtocols_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += alpnProtocols_.CalculateSize(_repeated_alpnProtocols_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(TlsOptions other) {
          if (other == null) {
            return;
          }
          alpnProtocols_.Add(other.alpnProtocols_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                alpnProtocols_.AddEntriesFrom(input, _repeated_alpnProtocols_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                alpnProtocols_.AddEntriesFrom(ref input, _repeated_alpnProtocols_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
