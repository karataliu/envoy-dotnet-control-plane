// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/cluster/v3/outlier_detection.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Cluster.V3 {

  /// <summary>Holder for reflection information generated from envoy/config/cluster/v3/outlier_detection.proto</summary>
  public static partial class OutlierDetectionReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/cluster/v3/outlier_detection.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OutlierDetectionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9lbnZveS9jb25maWcvY2x1c3Rlci92My9vdXRsaWVyX2RldGVjdGlvbi5w",
            "cm90bxIXZW52b3kuY29uZmlnLmNsdXN0ZXIudjMaHmdvb2dsZS9wcm90b2J1",
            "Zi9kdXJhdGlvbi5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnBy",
            "b3RvGh11ZHBhL2Fubm90YXRpb25zL3N0YXR1cy5wcm90bxohdWRwYS9hbm5v",
            "dGF0aW9ucy92ZXJzaW9uaW5nLnByb3RvGhd2YWxpZGF0ZS92YWxpZGF0ZS5w",
            "cm90byLJDAoQT3V0bGllckRldGVjdGlvbhI1Cg9jb25zZWN1dGl2ZV81eHgY",
            "ASABKAsyHC5nb29nbGUucHJvdG9idWYuVUludDMyVmFsdWUSNQoIaW50ZXJ2",
            "YWwYAiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CCPpCBaoBAioA",
            "Ej8KEmJhc2VfZWplY3Rpb25fdGltZRgDIAEoCzIZLmdvb2dsZS5wcm90b2J1",
            "Zi5EdXJhdGlvbkII+kIFqgECKgASQwoUbWF4X2VqZWN0aW9uX3BlcmNlbnQY",
            "BCABKAsyHC5nb29nbGUucHJvdG9idWYuVUludDMyVmFsdWVCB/pCBCoCGGQS",
            "SAoZZW5mb3JjaW5nX2NvbnNlY3V0aXZlXzV4eBgFIAEoCzIcLmdvb2dsZS5w",
            "cm90b2J1Zi5VSW50MzJWYWx1ZUIH+kIEKgIYZBJFChZlbmZvcmNpbmdfc3Vj",
            "Y2Vzc19yYXRlGAYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVl",
            "Qgf6QgQqAhhkEkAKGnN1Y2Nlc3NfcmF0ZV9taW5pbXVtX2hvc3RzGAcgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlEkEKG3N1Y2Nlc3NfcmF0",
            "ZV9yZXF1ZXN0X3ZvbHVtZRgIIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50",
            "MzJWYWx1ZRI/ChlzdWNjZXNzX3JhdGVfc3RkZXZfZmFjdG9yGAkgASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlEkEKG2NvbnNlY3V0aXZlX2dh",
            "dGV3YXlfZmFpbHVyZRgKIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJW",
            "YWx1ZRJUCiVlbmZvcmNpbmdfY29uc2VjdXRpdmVfZ2F0ZXdheV9mYWlsdXJl",
            "GAsgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlQgf6QgQqAhhk",
            "EioKInNwbGl0X2V4dGVybmFsX2xvY2FsX29yaWdpbl9lcnJvcnMYDCABKAgS",
            "RgogY29uc2VjdXRpdmVfbG9jYWxfb3JpZ2luX2ZhaWx1cmUYDSABKAsyHC5n",
            "b29nbGUucHJvdG9idWYuVUludDMyVmFsdWUSWQoqZW5mb3JjaW5nX2NvbnNl",
            "Y3V0aXZlX2xvY2FsX29yaWdpbl9mYWlsdXJlGA4gASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlVJbnQzMlZhbHVlQgf6QgQqAhhkElIKI2VuZm9yY2luZ19sb2Nh",
            "bF9vcmlnaW5fc3VjY2Vzc19yYXRlGA8gASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LlVJbnQzMlZhbHVlQgf6QgQqAhhkEksKHGZhaWx1cmVfcGVyY2VudGFnZV90",
            "aHJlc2hvbGQYECABKAsyHC5nb29nbGUucHJvdG9idWYuVUludDMyVmFsdWVC",
            "B/pCBCoCGGQSSwocZW5mb3JjaW5nX2ZhaWx1cmVfcGVyY2VudGFnZRgRIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZUIH+kIEKgIYZBJYCill",
            "bmZvcmNpbmdfZmFpbHVyZV9wZXJjZW50YWdlX2xvY2FsX29yaWdpbhgSIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZUIH+kIEKgIYZBJGCiBm",
            "YWlsdXJlX3BlcmNlbnRhZ2VfbWluaW11bV9ob3N0cxgTIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5VSW50MzJWYWx1ZRJHCiFmYWlsdXJlX3BlcmNlbnRhZ2Vf",
            "cmVxdWVzdF92b2x1bWUYFCABKAsyHC5nb29nbGUucHJvdG9idWYuVUludDMy",
            "VmFsdWUSPgoRbWF4X2VqZWN0aW9uX3RpbWUYFSABKAsyGS5nb29nbGUucHJv",
            "dG9idWYuRHVyYXRpb25CCPpCBaoBAioAEjsKGG1heF9lamVjdGlvbl90aW1l",
            "X2ppdHRlchgWIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbjosmsWI",
            "HicKJWVudm95LmFwaS52Mi5jbHVzdGVyLk91dGxpZXJEZXRlY3Rpb25CkgEK",
            "JWlvLmVudm95cHJveHkuZW52b3kuY29uZmlnLmNsdXN0ZXIudjNCFU91dGxp",
            "ZXJEZXRlY3Rpb25Qcm90b1ABWkhnaXRodWIuY29tL2Vudm95cHJveHkvZ28t",
            "Y29udHJvbC1wbGFuZS9lbnZveS9jb25maWcvY2x1c3Rlci92MztjbHVzdGVy",
            "djO6gMjRBgIQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Udpa.Annotations.VersioningReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Cluster.V3.OutlierDetection), global::Envoy.Config.Cluster.V3.OutlierDetection.Parser, new[]{ "Consecutive5Xx", "Interval", "BaseEjectionTime", "MaxEjectionPercent", "EnforcingConsecutive5Xx", "EnforcingSuccessRate", "SuccessRateMinimumHosts", "SuccessRateRequestVolume", "SuccessRateStdevFactor", "ConsecutiveGatewayFailure", "EnforcingConsecutiveGatewayFailure", "SplitExternalLocalOriginErrors", "ConsecutiveLocalOriginFailure", "EnforcingConsecutiveLocalOriginFailure", "EnforcingLocalOriginSuccessRate", "FailurePercentageThreshold", "EnforcingFailurePercentage", "EnforcingFailurePercentageLocalOrigin", "FailurePercentageMinimumHosts", "FailurePercentageRequestVolume", "MaxEjectionTime", "MaxEjectionTimeJitter" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// See the :ref:`architecture overview &lt;arch_overview_outlier_detection>` for
  /// more information on outlier detection.
  /// [#next-free-field: 23]
  /// </summary>
  public sealed partial class OutlierDetection : pb::IMessage<OutlierDetection>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OutlierDetection> _parser = new pb::MessageParser<OutlierDetection>(() => new OutlierDetection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OutlierDetection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Cluster.V3.OutlierDetectionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OutlierDetection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OutlierDetection(OutlierDetection other) : this() {
      Consecutive5Xx = other.Consecutive5Xx;
      interval_ = other.interval_ != null ? other.interval_.Clone() : null;
      baseEjectionTime_ = other.baseEjectionTime_ != null ? other.baseEjectionTime_.Clone() : null;
      MaxEjectionPercent = other.MaxEjectionPercent;
      EnforcingConsecutive5Xx = other.EnforcingConsecutive5Xx;
      EnforcingSuccessRate = other.EnforcingSuccessRate;
      SuccessRateMinimumHosts = other.SuccessRateMinimumHosts;
      SuccessRateRequestVolume = other.SuccessRateRequestVolume;
      SuccessRateStdevFactor = other.SuccessRateStdevFactor;
      ConsecutiveGatewayFailure = other.ConsecutiveGatewayFailure;
      EnforcingConsecutiveGatewayFailure = other.EnforcingConsecutiveGatewayFailure;
      splitExternalLocalOriginErrors_ = other.splitExternalLocalOriginErrors_;
      ConsecutiveLocalOriginFailure = other.ConsecutiveLocalOriginFailure;
      EnforcingConsecutiveLocalOriginFailure = other.EnforcingConsecutiveLocalOriginFailure;
      EnforcingLocalOriginSuccessRate = other.EnforcingLocalOriginSuccessRate;
      FailurePercentageThreshold = other.FailurePercentageThreshold;
      EnforcingFailurePercentage = other.EnforcingFailurePercentage;
      EnforcingFailurePercentageLocalOrigin = other.EnforcingFailurePercentageLocalOrigin;
      FailurePercentageMinimumHosts = other.FailurePercentageMinimumHosts;
      FailurePercentageRequestVolume = other.FailurePercentageRequestVolume;
      maxEjectionTime_ = other.maxEjectionTime_ != null ? other.maxEjectionTime_.Clone() : null;
      maxEjectionTimeJitter_ = other.maxEjectionTimeJitter_ != null ? other.maxEjectionTimeJitter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OutlierDetection Clone() {
      return new OutlierDetection(this);
    }

    /// <summary>Field number for the "consecutive_5xx" field.</summary>
    public const int Consecutive5XxFieldNumber = 1;
    private static readonly pb::FieldCodec<uint?> _single_consecutive5Xx_codec = pb::FieldCodec.ForStructWrapper<uint>(10);
    private uint? consecutive5Xx_;
    /// <summary>
    /// The number of consecutive server-side error responses (for HTTP traffic,
    /// 5xx responses; for TCP traffic, connection failures; for Redis, failure to
    /// respond PONG; etc.) before a consecutive 5xx ejection occurs. Defaults to 5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? Consecutive5Xx {
      get { return consecutive5Xx_; }
      set {
        consecutive5Xx_ = value;
      }
    }


    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration interval_;
    /// <summary>
    /// The time interval between ejection analysis sweeps. This can result in
    /// both new ejections as well as hosts being returned to service. Defaults
    /// to 10000ms or 10s.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "base_ejection_time" field.</summary>
    public const int BaseEjectionTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration baseEjectionTime_;
    /// <summary>
    /// The base time that a host is ejected for. The real time is equal to the
    /// base time multiplied by the number of times the host has been ejected and is
    /// capped by :ref:`max_ejection_time&lt;envoy_v3_api_field_config.cluster.v3.OutlierDetection.max_ejection_time>`.
    /// Defaults to 30000ms or 30s.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration BaseEjectionTime {
      get { return baseEjectionTime_; }
      set {
        baseEjectionTime_ = value;
      }
    }

    /// <summary>Field number for the "max_ejection_percent" field.</summary>
    public const int MaxEjectionPercentFieldNumber = 4;
    private static readonly pb::FieldCodec<uint?> _single_maxEjectionPercent_codec = pb::FieldCodec.ForStructWrapper<uint>(34);
    private uint? maxEjectionPercent_;
    /// <summary>
    /// The maximum % of an upstream cluster that can be ejected due to outlier
    /// detection. Defaults to 10% but will eject at least one host regardless of the value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? MaxEjectionPercent {
      get { return maxEjectionPercent_; }
      set {
        maxEjectionPercent_ = value;
      }
    }


    /// <summary>Field number for the "enforcing_consecutive_5xx" field.</summary>
    public const int EnforcingConsecutive5XxFieldNumber = 5;
    private static readonly pb::FieldCodec<uint?> _single_enforcingConsecutive5Xx_codec = pb::FieldCodec.ForStructWrapper<uint>(42);
    private uint? enforcingConsecutive5Xx_;
    /// <summary>
    /// The % chance that a host will be actually ejected when an outlier status
    /// is detected through consecutive 5xx. This setting can be used to disable
    /// ejection or to ramp it up slowly. Defaults to 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? EnforcingConsecutive5Xx {
      get { return enforcingConsecutive5Xx_; }
      set {
        enforcingConsecutive5Xx_ = value;
      }
    }


    /// <summary>Field number for the "enforcing_success_rate" field.</summary>
    public const int EnforcingSuccessRateFieldNumber = 6;
    private static readonly pb::FieldCodec<uint?> _single_enforcingSuccessRate_codec = pb::FieldCodec.ForStructWrapper<uint>(50);
    private uint? enforcingSuccessRate_;
    /// <summary>
    /// The % chance that a host will be actually ejected when an outlier status
    /// is detected through success rate statistics. This setting can be used to
    /// disable ejection or to ramp it up slowly. Defaults to 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? EnforcingSuccessRate {
      get { return enforcingSuccessRate_; }
      set {
        enforcingSuccessRate_ = value;
      }
    }


    /// <summary>Field number for the "success_rate_minimum_hosts" field.</summary>
    public const int SuccessRateMinimumHostsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint?> _single_successRateMinimumHosts_codec = pb::FieldCodec.ForStructWrapper<uint>(58);
    private uint? successRateMinimumHosts_;
    /// <summary>
    /// The number of hosts in a cluster that must have enough request volume to
    /// detect success rate outliers. If the number of hosts is less than this
    /// setting, outlier detection via success rate statistics is not performed
    /// for any host in the cluster. Defaults to 5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? SuccessRateMinimumHosts {
      get { return successRateMinimumHosts_; }
      set {
        successRateMinimumHosts_ = value;
      }
    }


    /// <summary>Field number for the "success_rate_request_volume" field.</summary>
    public const int SuccessRateRequestVolumeFieldNumber = 8;
    private static readonly pb::FieldCodec<uint?> _single_successRateRequestVolume_codec = pb::FieldCodec.ForStructWrapper<uint>(66);
    private uint? successRateRequestVolume_;
    /// <summary>
    /// The minimum number of total requests that must be collected in one
    /// interval (as defined by the interval duration above) to include this host
    /// in success rate based outlier detection. If the volume is lower than this
    /// setting, outlier detection via success rate statistics is not performed
    /// for that host. Defaults to 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? SuccessRateRequestVolume {
      get { return successRateRequestVolume_; }
      set {
        successRateRequestVolume_ = value;
      }
    }


    /// <summary>Field number for the "success_rate_stdev_factor" field.</summary>
    public const int SuccessRateStdevFactorFieldNumber = 9;
    private static readonly pb::FieldCodec<uint?> _single_successRateStdevFactor_codec = pb::FieldCodec.ForStructWrapper<uint>(74);
    private uint? successRateStdevFactor_;
    /// <summary>
    /// This factor is used to determine the ejection threshold for success rate
    /// outlier ejection. The ejection threshold is the difference between the
    /// mean success rate, and the product of this factor and the standard
    /// deviation of the mean success rate: mean - (stdev *
    /// success_rate_stdev_factor). This factor is divided by a thousand to get a
    /// double. That is, if the desired factor is 1.9, the runtime value should
    /// be 1900. Defaults to 1900.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? SuccessRateStdevFactor {
      get { return successRateStdevFactor_; }
      set {
        successRateStdevFactor_ = value;
      }
    }


    /// <summary>Field number for the "consecutive_gateway_failure" field.</summary>
    public const int ConsecutiveGatewayFailureFieldNumber = 10;
    private static readonly pb::FieldCodec<uint?> _single_consecutiveGatewayFailure_codec = pb::FieldCodec.ForStructWrapper<uint>(82);
    private uint? consecutiveGatewayFailure_;
    /// <summary>
    /// The number of consecutive gateway failures (502, 503, 504 status codes)
    /// before a consecutive gateway failure ejection occurs. Defaults to 5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? ConsecutiveGatewayFailure {
      get { return consecutiveGatewayFailure_; }
      set {
        consecutiveGatewayFailure_ = value;
      }
    }


    /// <summary>Field number for the "enforcing_consecutive_gateway_failure" field.</summary>
    public const int EnforcingConsecutiveGatewayFailureFieldNumber = 11;
    private static readonly pb::FieldCodec<uint?> _single_enforcingConsecutiveGatewayFailure_codec = pb::FieldCodec.ForStructWrapper<uint>(90);
    private uint? enforcingConsecutiveGatewayFailure_;
    /// <summary>
    /// The % chance that a host will be actually ejected when an outlier status
    /// is detected through consecutive gateway failures. This setting can be
    /// used to disable ejection or to ramp it up slowly. Defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? EnforcingConsecutiveGatewayFailure {
      get { return enforcingConsecutiveGatewayFailure_; }
      set {
        enforcingConsecutiveGatewayFailure_ = value;
      }
    }


    /// <summary>Field number for the "split_external_local_origin_errors" field.</summary>
    public const int SplitExternalLocalOriginErrorsFieldNumber = 12;
    private bool splitExternalLocalOriginErrors_;
    /// <summary>
    /// Determines whether to distinguish local origin failures from external errors. If set to true
    /// the following configuration parameters are taken into account:
    /// :ref:`consecutive_local_origin_failure&lt;envoy_v3_api_field_config.cluster.v3.OutlierDetection.consecutive_local_origin_failure>`,
    /// :ref:`enforcing_consecutive_local_origin_failure&lt;envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_consecutive_local_origin_failure>`
    /// and
    /// :ref:`enforcing_local_origin_success_rate&lt;envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_local_origin_success_rate>`.
    /// Defaults to false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SplitExternalLocalOriginErrors {
      get { return splitExternalLocalOriginErrors_; }
      set {
        splitExternalLocalOriginErrors_ = value;
      }
    }

    /// <summary>Field number for the "consecutive_local_origin_failure" field.</summary>
    public const int ConsecutiveLocalOriginFailureFieldNumber = 13;
    private static readonly pb::FieldCodec<uint?> _single_consecutiveLocalOriginFailure_codec = pb::FieldCodec.ForStructWrapper<uint>(106);
    private uint? consecutiveLocalOriginFailure_;
    /// <summary>
    /// The number of consecutive locally originated failures before ejection
    /// occurs. Defaults to 5. Parameter takes effect only when
    /// :ref:`split_external_local_origin_errors&lt;envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
    /// is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? ConsecutiveLocalOriginFailure {
      get { return consecutiveLocalOriginFailure_; }
      set {
        consecutiveLocalOriginFailure_ = value;
      }
    }


    /// <summary>Field number for the "enforcing_consecutive_local_origin_failure" field.</summary>
    public const int EnforcingConsecutiveLocalOriginFailureFieldNumber = 14;
    private static readonly pb::FieldCodec<uint?> _single_enforcingConsecutiveLocalOriginFailure_codec = pb::FieldCodec.ForStructWrapper<uint>(114);
    private uint? enforcingConsecutiveLocalOriginFailure_;
    /// <summary>
    /// The % chance that a host will be actually ejected when an outlier status
    /// is detected through consecutive locally originated failures. This setting can be
    /// used to disable ejection or to ramp it up slowly. Defaults to 100.
    /// Parameter takes effect only when
    /// :ref:`split_external_local_origin_errors&lt;envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
    /// is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? EnforcingConsecutiveLocalOriginFailure {
      get { return enforcingConsecutiveLocalOriginFailure_; }
      set {
        enforcingConsecutiveLocalOriginFailure_ = value;
      }
    }


    /// <summary>Field number for the "enforcing_local_origin_success_rate" field.</summary>
    public const int EnforcingLocalOriginSuccessRateFieldNumber = 15;
    private static readonly pb::FieldCodec<uint?> _single_enforcingLocalOriginSuccessRate_codec = pb::FieldCodec.ForStructWrapper<uint>(122);
    private uint? enforcingLocalOriginSuccessRate_;
    /// <summary>
    /// The % chance that a host will be actually ejected when an outlier status
    /// is detected through success rate statistics for locally originated errors.
    /// This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
    /// Parameter takes effect only when
    /// :ref:`split_external_local_origin_errors&lt;envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
    /// is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? EnforcingLocalOriginSuccessRate {
      get { return enforcingLocalOriginSuccessRate_; }
      set {
        enforcingLocalOriginSuccessRate_ = value;
      }
    }


    /// <summary>Field number for the "failure_percentage_threshold" field.</summary>
    public const int FailurePercentageThresholdFieldNumber = 16;
    private static readonly pb::FieldCodec<uint?> _single_failurePercentageThreshold_codec = pb::FieldCodec.ForStructWrapper<uint>(130);
    private uint? failurePercentageThreshold_;
    /// <summary>
    /// The failure percentage to use when determining failure percentage-based outlier detection. If
    /// the failure percentage of a given host is greater than or equal to this value, it will be
    /// ejected. Defaults to 85.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? FailurePercentageThreshold {
      get { return failurePercentageThreshold_; }
      set {
        failurePercentageThreshold_ = value;
      }
    }


    /// <summary>Field number for the "enforcing_failure_percentage" field.</summary>
    public const int EnforcingFailurePercentageFieldNumber = 17;
    private static readonly pb::FieldCodec<uint?> _single_enforcingFailurePercentage_codec = pb::FieldCodec.ForStructWrapper<uint>(138);
    private uint? enforcingFailurePercentage_;
    /// <summary>
    /// The % chance that a host will be actually ejected when an outlier status is detected through
    /// failure percentage statistics. This setting can be used to disable ejection or to ramp it up
    /// slowly. Defaults to 0.
    ///
    /// [#next-major-version: setting this without setting failure_percentage_threshold should be
    /// invalid in v4.]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? EnforcingFailurePercentage {
      get { return enforcingFailurePercentage_; }
      set {
        enforcingFailurePercentage_ = value;
      }
    }


    /// <summary>Field number for the "enforcing_failure_percentage_local_origin" field.</summary>
    public const int EnforcingFailurePercentageLocalOriginFieldNumber = 18;
    private static readonly pb::FieldCodec<uint?> _single_enforcingFailurePercentageLocalOrigin_codec = pb::FieldCodec.ForStructWrapper<uint>(146);
    private uint? enforcingFailurePercentageLocalOrigin_;
    /// <summary>
    /// The % chance that a host will be actually ejected when an outlier status is detected through
    /// local-origin failure percentage statistics. This setting can be used to disable ejection or to
    /// ramp it up slowly. Defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? EnforcingFailurePercentageLocalOrigin {
      get { return enforcingFailurePercentageLocalOrigin_; }
      set {
        enforcingFailurePercentageLocalOrigin_ = value;
      }
    }


    /// <summary>Field number for the "failure_percentage_minimum_hosts" field.</summary>
    public const int FailurePercentageMinimumHostsFieldNumber = 19;
    private static readonly pb::FieldCodec<uint?> _single_failurePercentageMinimumHosts_codec = pb::FieldCodec.ForStructWrapper<uint>(154);
    private uint? failurePercentageMinimumHosts_;
    /// <summary>
    /// The minimum number of hosts in a cluster in order to perform failure percentage-based ejection.
    /// If the total number of hosts in the cluster is less than this value, failure percentage-based
    /// ejection will not be performed. Defaults to 5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? FailurePercentageMinimumHosts {
      get { return failurePercentageMinimumHosts_; }
      set {
        failurePercentageMinimumHosts_ = value;
      }
    }


    /// <summary>Field number for the "failure_percentage_request_volume" field.</summary>
    public const int FailurePercentageRequestVolumeFieldNumber = 20;
    private static readonly pb::FieldCodec<uint?> _single_failurePercentageRequestVolume_codec = pb::FieldCodec.ForStructWrapper<uint>(162);
    private uint? failurePercentageRequestVolume_;
    /// <summary>
    /// The minimum number of total requests that must be collected in one interval (as defined by the
    /// interval duration above) to perform failure percentage-based ejection for this host. If the
    /// volume is lower than this setting, failure percentage-based ejection will not be performed for
    /// this host. Defaults to 50.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? FailurePercentageRequestVolume {
      get { return failurePercentageRequestVolume_; }
      set {
        failurePercentageRequestVolume_ = value;
      }
    }


    /// <summary>Field number for the "max_ejection_time" field.</summary>
    public const int MaxEjectionTimeFieldNumber = 21;
    private global::Google.Protobuf.WellKnownTypes.Duration maxEjectionTime_;
    /// <summary>
    /// The maximum time that a host is ejected for. See :ref:`base_ejection_time&lt;envoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time>`
    /// for more information. If not specified, the default value (300000ms or 300s) or
    /// :ref:`base_ejection_time&lt;envoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time>` value is applied, whatever is larger.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration MaxEjectionTime {
      get { return maxEjectionTime_; }
      set {
        maxEjectionTime_ = value;
      }
    }

    /// <summary>Field number for the "max_ejection_time_jitter" field.</summary>
    public const int MaxEjectionTimeJitterFieldNumber = 22;
    private global::Google.Protobuf.WellKnownTypes.Duration maxEjectionTimeJitter_;
    /// <summary>
    /// The maximum amount of jitter to add to the ejection time, in order to prevent
    /// a 'thundering herd' effect where all proxies try to reconnect to host at the same time.
    /// See :ref:`max_ejection_time_jitter&lt;envoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time>`
    /// Defaults to 0s.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration MaxEjectionTimeJitter {
      get { return maxEjectionTimeJitter_; }
      set {
        maxEjectionTimeJitter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OutlierDetection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OutlierDetection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Consecutive5Xx != other.Consecutive5Xx) return false;
      if (!object.Equals(Interval, other.Interval)) return false;
      if (!object.Equals(BaseEjectionTime, other.BaseEjectionTime)) return false;
      if (MaxEjectionPercent != other.MaxEjectionPercent) return false;
      if (EnforcingConsecutive5Xx != other.EnforcingConsecutive5Xx) return false;
      if (EnforcingSuccessRate != other.EnforcingSuccessRate) return false;
      if (SuccessRateMinimumHosts != other.SuccessRateMinimumHosts) return false;
      if (SuccessRateRequestVolume != other.SuccessRateRequestVolume) return false;
      if (SuccessRateStdevFactor != other.SuccessRateStdevFactor) return false;
      if (ConsecutiveGatewayFailure != other.ConsecutiveGatewayFailure) return false;
      if (EnforcingConsecutiveGatewayFailure != other.EnforcingConsecutiveGatewayFailure) return false;
      if (SplitExternalLocalOriginErrors != other.SplitExternalLocalOriginErrors) return false;
      if (ConsecutiveLocalOriginFailure != other.ConsecutiveLocalOriginFailure) return false;
      if (EnforcingConsecutiveLocalOriginFailure != other.EnforcingConsecutiveLocalOriginFailure) return false;
      if (EnforcingLocalOriginSuccessRate != other.EnforcingLocalOriginSuccessRate) return false;
      if (FailurePercentageThreshold != other.FailurePercentageThreshold) return false;
      if (EnforcingFailurePercentage != other.EnforcingFailurePercentage) return false;
      if (EnforcingFailurePercentageLocalOrigin != other.EnforcingFailurePercentageLocalOrigin) return false;
      if (FailurePercentageMinimumHosts != other.FailurePercentageMinimumHosts) return false;
      if (FailurePercentageRequestVolume != other.FailurePercentageRequestVolume) return false;
      if (!object.Equals(MaxEjectionTime, other.MaxEjectionTime)) return false;
      if (!object.Equals(MaxEjectionTimeJitter, other.MaxEjectionTimeJitter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (consecutive5Xx_ != null) hash ^= Consecutive5Xx.GetHashCode();
      if (interval_ != null) hash ^= Interval.GetHashCode();
      if (baseEjectionTime_ != null) hash ^= BaseEjectionTime.GetHashCode();
      if (maxEjectionPercent_ != null) hash ^= MaxEjectionPercent.GetHashCode();
      if (enforcingConsecutive5Xx_ != null) hash ^= EnforcingConsecutive5Xx.GetHashCode();
      if (enforcingSuccessRate_ != null) hash ^= EnforcingSuccessRate.GetHashCode();
      if (successRateMinimumHosts_ != null) hash ^= SuccessRateMinimumHosts.GetHashCode();
      if (successRateRequestVolume_ != null) hash ^= SuccessRateRequestVolume.GetHashCode();
      if (successRateStdevFactor_ != null) hash ^= SuccessRateStdevFactor.GetHashCode();
      if (consecutiveGatewayFailure_ != null) hash ^= ConsecutiveGatewayFailure.GetHashCode();
      if (enforcingConsecutiveGatewayFailure_ != null) hash ^= EnforcingConsecutiveGatewayFailure.GetHashCode();
      if (SplitExternalLocalOriginErrors != false) hash ^= SplitExternalLocalOriginErrors.GetHashCode();
      if (consecutiveLocalOriginFailure_ != null) hash ^= ConsecutiveLocalOriginFailure.GetHashCode();
      if (enforcingConsecutiveLocalOriginFailure_ != null) hash ^= EnforcingConsecutiveLocalOriginFailure.GetHashCode();
      if (enforcingLocalOriginSuccessRate_ != null) hash ^= EnforcingLocalOriginSuccessRate.GetHashCode();
      if (failurePercentageThreshold_ != null) hash ^= FailurePercentageThreshold.GetHashCode();
      if (enforcingFailurePercentage_ != null) hash ^= EnforcingFailurePercentage.GetHashCode();
      if (enforcingFailurePercentageLocalOrigin_ != null) hash ^= EnforcingFailurePercentageLocalOrigin.GetHashCode();
      if (failurePercentageMinimumHosts_ != null) hash ^= FailurePercentageMinimumHosts.GetHashCode();
      if (failurePercentageRequestVolume_ != null) hash ^= FailurePercentageRequestVolume.GetHashCode();
      if (maxEjectionTime_ != null) hash ^= MaxEjectionTime.GetHashCode();
      if (maxEjectionTimeJitter_ != null) hash ^= MaxEjectionTimeJitter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (consecutive5Xx_ != null) {
        _single_consecutive5Xx_codec.WriteTagAndValue(output, Consecutive5Xx);
      }
      if (interval_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Interval);
      }
      if (baseEjectionTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BaseEjectionTime);
      }
      if (maxEjectionPercent_ != null) {
        _single_maxEjectionPercent_codec.WriteTagAndValue(output, MaxEjectionPercent);
      }
      if (enforcingConsecutive5Xx_ != null) {
        _single_enforcingConsecutive5Xx_codec.WriteTagAndValue(output, EnforcingConsecutive5Xx);
      }
      if (enforcingSuccessRate_ != null) {
        _single_enforcingSuccessRate_codec.WriteTagAndValue(output, EnforcingSuccessRate);
      }
      if (successRateMinimumHosts_ != null) {
        _single_successRateMinimumHosts_codec.WriteTagAndValue(output, SuccessRateMinimumHosts);
      }
      if (successRateRequestVolume_ != null) {
        _single_successRateRequestVolume_codec.WriteTagAndValue(output, SuccessRateRequestVolume);
      }
      if (successRateStdevFactor_ != null) {
        _single_successRateStdevFactor_codec.WriteTagAndValue(output, SuccessRateStdevFactor);
      }
      if (consecutiveGatewayFailure_ != null) {
        _single_consecutiveGatewayFailure_codec.WriteTagAndValue(output, ConsecutiveGatewayFailure);
      }
      if (enforcingConsecutiveGatewayFailure_ != null) {
        _single_enforcingConsecutiveGatewayFailure_codec.WriteTagAndValue(output, EnforcingConsecutiveGatewayFailure);
      }
      if (SplitExternalLocalOriginErrors != false) {
        output.WriteRawTag(96);
        output.WriteBool(SplitExternalLocalOriginErrors);
      }
      if (consecutiveLocalOriginFailure_ != null) {
        _single_consecutiveLocalOriginFailure_codec.WriteTagAndValue(output, ConsecutiveLocalOriginFailure);
      }
      if (enforcingConsecutiveLocalOriginFailure_ != null) {
        _single_enforcingConsecutiveLocalOriginFailure_codec.WriteTagAndValue(output, EnforcingConsecutiveLocalOriginFailure);
      }
      if (enforcingLocalOriginSuccessRate_ != null) {
        _single_enforcingLocalOriginSuccessRate_codec.WriteTagAndValue(output, EnforcingLocalOriginSuccessRate);
      }
      if (failurePercentageThreshold_ != null) {
        _single_failurePercentageThreshold_codec.WriteTagAndValue(output, FailurePercentageThreshold);
      }
      if (enforcingFailurePercentage_ != null) {
        _single_enforcingFailurePercentage_codec.WriteTagAndValue(output, EnforcingFailurePercentage);
      }
      if (enforcingFailurePercentageLocalOrigin_ != null) {
        _single_enforcingFailurePercentageLocalOrigin_codec.WriteTagAndValue(output, EnforcingFailurePercentageLocalOrigin);
      }
      if (failurePercentageMinimumHosts_ != null) {
        _single_failurePercentageMinimumHosts_codec.WriteTagAndValue(output, FailurePercentageMinimumHosts);
      }
      if (failurePercentageRequestVolume_ != null) {
        _single_failurePercentageRequestVolume_codec.WriteTagAndValue(output, FailurePercentageRequestVolume);
      }
      if (maxEjectionTime_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(MaxEjectionTime);
      }
      if (maxEjectionTimeJitter_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MaxEjectionTimeJitter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (consecutive5Xx_ != null) {
        _single_consecutive5Xx_codec.WriteTagAndValue(ref output, Consecutive5Xx);
      }
      if (interval_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Interval);
      }
      if (baseEjectionTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BaseEjectionTime);
      }
      if (maxEjectionPercent_ != null) {
        _single_maxEjectionPercent_codec.WriteTagAndValue(ref output, MaxEjectionPercent);
      }
      if (enforcingConsecutive5Xx_ != null) {
        _single_enforcingConsecutive5Xx_codec.WriteTagAndValue(ref output, EnforcingConsecutive5Xx);
      }
      if (enforcingSuccessRate_ != null) {
        _single_enforcingSuccessRate_codec.WriteTagAndValue(ref output, EnforcingSuccessRate);
      }
      if (successRateMinimumHosts_ != null) {
        _single_successRateMinimumHosts_codec.WriteTagAndValue(ref output, SuccessRateMinimumHosts);
      }
      if (successRateRequestVolume_ != null) {
        _single_successRateRequestVolume_codec.WriteTagAndValue(ref output, SuccessRateRequestVolume);
      }
      if (successRateStdevFactor_ != null) {
        _single_successRateStdevFactor_codec.WriteTagAndValue(ref output, SuccessRateStdevFactor);
      }
      if (consecutiveGatewayFailure_ != null) {
        _single_consecutiveGatewayFailure_codec.WriteTagAndValue(ref output, ConsecutiveGatewayFailure);
      }
      if (enforcingConsecutiveGatewayFailure_ != null) {
        _single_enforcingConsecutiveGatewayFailure_codec.WriteTagAndValue(ref output, EnforcingConsecutiveGatewayFailure);
      }
      if (SplitExternalLocalOriginErrors != false) {
        output.WriteRawTag(96);
        output.WriteBool(SplitExternalLocalOriginErrors);
      }
      if (consecutiveLocalOriginFailure_ != null) {
        _single_consecutiveLocalOriginFailure_codec.WriteTagAndValue(ref output, ConsecutiveLocalOriginFailure);
      }
      if (enforcingConsecutiveLocalOriginFailure_ != null) {
        _single_enforcingConsecutiveLocalOriginFailure_codec.WriteTagAndValue(ref output, EnforcingConsecutiveLocalOriginFailure);
      }
      if (enforcingLocalOriginSuccessRate_ != null) {
        _single_enforcingLocalOriginSuccessRate_codec.WriteTagAndValue(ref output, EnforcingLocalOriginSuccessRate);
      }
      if (failurePercentageThreshold_ != null) {
        _single_failurePercentageThreshold_codec.WriteTagAndValue(ref output, FailurePercentageThreshold);
      }
      if (enforcingFailurePercentage_ != null) {
        _single_enforcingFailurePercentage_codec.WriteTagAndValue(ref output, EnforcingFailurePercentage);
      }
      if (enforcingFailurePercentageLocalOrigin_ != null) {
        _single_enforcingFailurePercentageLocalOrigin_codec.WriteTagAndValue(ref output, EnforcingFailurePercentageLocalOrigin);
      }
      if (failurePercentageMinimumHosts_ != null) {
        _single_failurePercentageMinimumHosts_codec.WriteTagAndValue(ref output, FailurePercentageMinimumHosts);
      }
      if (failurePercentageRequestVolume_ != null) {
        _single_failurePercentageRequestVolume_codec.WriteTagAndValue(ref output, FailurePercentageRequestVolume);
      }
      if (maxEjectionTime_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(MaxEjectionTime);
      }
      if (maxEjectionTimeJitter_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MaxEjectionTimeJitter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (consecutive5Xx_ != null) {
        size += _single_consecutive5Xx_codec.CalculateSizeWithTag(Consecutive5Xx);
      }
      if (interval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (baseEjectionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseEjectionTime);
      }
      if (maxEjectionPercent_ != null) {
        size += _single_maxEjectionPercent_codec.CalculateSizeWithTag(MaxEjectionPercent);
      }
      if (enforcingConsecutive5Xx_ != null) {
        size += _single_enforcingConsecutive5Xx_codec.CalculateSizeWithTag(EnforcingConsecutive5Xx);
      }
      if (enforcingSuccessRate_ != null) {
        size += _single_enforcingSuccessRate_codec.CalculateSizeWithTag(EnforcingSuccessRate);
      }
      if (successRateMinimumHosts_ != null) {
        size += _single_successRateMinimumHosts_codec.CalculateSizeWithTag(SuccessRateMinimumHosts);
      }
      if (successRateRequestVolume_ != null) {
        size += _single_successRateRequestVolume_codec.CalculateSizeWithTag(SuccessRateRequestVolume);
      }
      if (successRateStdevFactor_ != null) {
        size += _single_successRateStdevFactor_codec.CalculateSizeWithTag(SuccessRateStdevFactor);
      }
      if (consecutiveGatewayFailure_ != null) {
        size += _single_consecutiveGatewayFailure_codec.CalculateSizeWithTag(ConsecutiveGatewayFailure);
      }
      if (enforcingConsecutiveGatewayFailure_ != null) {
        size += _single_enforcingConsecutiveGatewayFailure_codec.CalculateSizeWithTag(EnforcingConsecutiveGatewayFailure);
      }
      if (SplitExternalLocalOriginErrors != false) {
        size += 1 + 1;
      }
      if (consecutiveLocalOriginFailure_ != null) {
        size += _single_consecutiveLocalOriginFailure_codec.CalculateSizeWithTag(ConsecutiveLocalOriginFailure);
      }
      if (enforcingConsecutiveLocalOriginFailure_ != null) {
        size += _single_enforcingConsecutiveLocalOriginFailure_codec.CalculateSizeWithTag(EnforcingConsecutiveLocalOriginFailure);
      }
      if (enforcingLocalOriginSuccessRate_ != null) {
        size += _single_enforcingLocalOriginSuccessRate_codec.CalculateSizeWithTag(EnforcingLocalOriginSuccessRate);
      }
      if (failurePercentageThreshold_ != null) {
        size += _single_failurePercentageThreshold_codec.CalculateSizeWithTag(FailurePercentageThreshold);
      }
      if (enforcingFailurePercentage_ != null) {
        size += _single_enforcingFailurePercentage_codec.CalculateSizeWithTag(EnforcingFailurePercentage);
      }
      if (enforcingFailurePercentageLocalOrigin_ != null) {
        size += _single_enforcingFailurePercentageLocalOrigin_codec.CalculateSizeWithTag(EnforcingFailurePercentageLocalOrigin);
      }
      if (failurePercentageMinimumHosts_ != null) {
        size += _single_failurePercentageMinimumHosts_codec.CalculateSizeWithTag(FailurePercentageMinimumHosts);
      }
      if (failurePercentageRequestVolume_ != null) {
        size += _single_failurePercentageRequestVolume_codec.CalculateSizeWithTag(FailurePercentageRequestVolume);
      }
      if (maxEjectionTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxEjectionTime);
      }
      if (maxEjectionTimeJitter_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxEjectionTimeJitter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OutlierDetection other) {
      if (other == null) {
        return;
      }
      if (other.consecutive5Xx_ != null) {
        if (consecutive5Xx_ == null || other.Consecutive5Xx != 0) {
          Consecutive5Xx = other.Consecutive5Xx;
        }
      }
      if (other.interval_ != null) {
        if (interval_ == null) {
          Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Interval.MergeFrom(other.Interval);
      }
      if (other.baseEjectionTime_ != null) {
        if (baseEjectionTime_ == null) {
          BaseEjectionTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        BaseEjectionTime.MergeFrom(other.BaseEjectionTime);
      }
      if (other.maxEjectionPercent_ != null) {
        if (maxEjectionPercent_ == null || other.MaxEjectionPercent != 0) {
          MaxEjectionPercent = other.MaxEjectionPercent;
        }
      }
      if (other.enforcingConsecutive5Xx_ != null) {
        if (enforcingConsecutive5Xx_ == null || other.EnforcingConsecutive5Xx != 0) {
          EnforcingConsecutive5Xx = other.EnforcingConsecutive5Xx;
        }
      }
      if (other.enforcingSuccessRate_ != null) {
        if (enforcingSuccessRate_ == null || other.EnforcingSuccessRate != 0) {
          EnforcingSuccessRate = other.EnforcingSuccessRate;
        }
      }
      if (other.successRateMinimumHosts_ != null) {
        if (successRateMinimumHosts_ == null || other.SuccessRateMinimumHosts != 0) {
          SuccessRateMinimumHosts = other.SuccessRateMinimumHosts;
        }
      }
      if (other.successRateRequestVolume_ != null) {
        if (successRateRequestVolume_ == null || other.SuccessRateRequestVolume != 0) {
          SuccessRateRequestVolume = other.SuccessRateRequestVolume;
        }
      }
      if (other.successRateStdevFactor_ != null) {
        if (successRateStdevFactor_ == null || other.SuccessRateStdevFactor != 0) {
          SuccessRateStdevFactor = other.SuccessRateStdevFactor;
        }
      }
      if (other.consecutiveGatewayFailure_ != null) {
        if (consecutiveGatewayFailure_ == null || other.ConsecutiveGatewayFailure != 0) {
          ConsecutiveGatewayFailure = other.ConsecutiveGatewayFailure;
        }
      }
      if (other.enforcingConsecutiveGatewayFailure_ != null) {
        if (enforcingConsecutiveGatewayFailure_ == null || other.EnforcingConsecutiveGatewayFailure != 0) {
          EnforcingConsecutiveGatewayFailure = other.EnforcingConsecutiveGatewayFailure;
        }
      }
      if (other.SplitExternalLocalOriginErrors != false) {
        SplitExternalLocalOriginErrors = other.SplitExternalLocalOriginErrors;
      }
      if (other.consecutiveLocalOriginFailure_ != null) {
        if (consecutiveLocalOriginFailure_ == null || other.ConsecutiveLocalOriginFailure != 0) {
          ConsecutiveLocalOriginFailure = other.ConsecutiveLocalOriginFailure;
        }
      }
      if (other.enforcingConsecutiveLocalOriginFailure_ != null) {
        if (enforcingConsecutiveLocalOriginFailure_ == null || other.EnforcingConsecutiveLocalOriginFailure != 0) {
          EnforcingConsecutiveLocalOriginFailure = other.EnforcingConsecutiveLocalOriginFailure;
        }
      }
      if (other.enforcingLocalOriginSuccessRate_ != null) {
        if (enforcingLocalOriginSuccessRate_ == null || other.EnforcingLocalOriginSuccessRate != 0) {
          EnforcingLocalOriginSuccessRate = other.EnforcingLocalOriginSuccessRate;
        }
      }
      if (other.failurePercentageThreshold_ != null) {
        if (failurePercentageThreshold_ == null || other.FailurePercentageThreshold != 0) {
          FailurePercentageThreshold = other.FailurePercentageThreshold;
        }
      }
      if (other.enforcingFailurePercentage_ != null) {
        if (enforcingFailurePercentage_ == null || other.EnforcingFailurePercentage != 0) {
          EnforcingFailurePercentage = other.EnforcingFailurePercentage;
        }
      }
      if (other.enforcingFailurePercentageLocalOrigin_ != null) {
        if (enforcingFailurePercentageLocalOrigin_ == null || other.EnforcingFailurePercentageLocalOrigin != 0) {
          EnforcingFailurePercentageLocalOrigin = other.EnforcingFailurePercentageLocalOrigin;
        }
      }
      if (other.failurePercentageMinimumHosts_ != null) {
        if (failurePercentageMinimumHosts_ == null || other.FailurePercentageMinimumHosts != 0) {
          FailurePercentageMinimumHosts = other.FailurePercentageMinimumHosts;
        }
      }
      if (other.failurePercentageRequestVolume_ != null) {
        if (failurePercentageRequestVolume_ == null || other.FailurePercentageRequestVolume != 0) {
          FailurePercentageRequestVolume = other.FailurePercentageRequestVolume;
        }
      }
      if (other.maxEjectionTime_ != null) {
        if (maxEjectionTime_ == null) {
          MaxEjectionTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MaxEjectionTime.MergeFrom(other.MaxEjectionTime);
      }
      if (other.maxEjectionTimeJitter_ != null) {
        if (maxEjectionTimeJitter_ == null) {
          MaxEjectionTimeJitter = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MaxEjectionTimeJitter.MergeFrom(other.MaxEjectionTimeJitter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            uint? value = _single_consecutive5Xx_codec.Read(input);
            if (consecutive5Xx_ == null || value != 0) {
              Consecutive5Xx = value;
            }
            break;
          }
          case 18: {
            if (interval_ == null) {
              Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 26: {
            if (baseEjectionTime_ == null) {
              BaseEjectionTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(BaseEjectionTime);
            break;
          }
          case 34: {
            uint? value = _single_maxEjectionPercent_codec.Read(input);
            if (maxEjectionPercent_ == null || value != 0) {
              MaxEjectionPercent = value;
            }
            break;
          }
          case 42: {
            uint? value = _single_enforcingConsecutive5Xx_codec.Read(input);
            if (enforcingConsecutive5Xx_ == null || value != 0) {
              EnforcingConsecutive5Xx = value;
            }
            break;
          }
          case 50: {
            uint? value = _single_enforcingSuccessRate_codec.Read(input);
            if (enforcingSuccessRate_ == null || value != 0) {
              EnforcingSuccessRate = value;
            }
            break;
          }
          case 58: {
            uint? value = _single_successRateMinimumHosts_codec.Read(input);
            if (successRateMinimumHosts_ == null || value != 0) {
              SuccessRateMinimumHosts = value;
            }
            break;
          }
          case 66: {
            uint? value = _single_successRateRequestVolume_codec.Read(input);
            if (successRateRequestVolume_ == null || value != 0) {
              SuccessRateRequestVolume = value;
            }
            break;
          }
          case 74: {
            uint? value = _single_successRateStdevFactor_codec.Read(input);
            if (successRateStdevFactor_ == null || value != 0) {
              SuccessRateStdevFactor = value;
            }
            break;
          }
          case 82: {
            uint? value = _single_consecutiveGatewayFailure_codec.Read(input);
            if (consecutiveGatewayFailure_ == null || value != 0) {
              ConsecutiveGatewayFailure = value;
            }
            break;
          }
          case 90: {
            uint? value = _single_enforcingConsecutiveGatewayFailure_codec.Read(input);
            if (enforcingConsecutiveGatewayFailure_ == null || value != 0) {
              EnforcingConsecutiveGatewayFailure = value;
            }
            break;
          }
          case 96: {
            SplitExternalLocalOriginErrors = input.ReadBool();
            break;
          }
          case 106: {
            uint? value = _single_consecutiveLocalOriginFailure_codec.Read(input);
            if (consecutiveLocalOriginFailure_ == null || value != 0) {
              ConsecutiveLocalOriginFailure = value;
            }
            break;
          }
          case 114: {
            uint? value = _single_enforcingConsecutiveLocalOriginFailure_codec.Read(input);
            if (enforcingConsecutiveLocalOriginFailure_ == null || value != 0) {
              EnforcingConsecutiveLocalOriginFailure = value;
            }
            break;
          }
          case 122: {
            uint? value = _single_enforcingLocalOriginSuccessRate_codec.Read(input);
            if (enforcingLocalOriginSuccessRate_ == null || value != 0) {
              EnforcingLocalOriginSuccessRate = value;
            }
            break;
          }
          case 130: {
            uint? value = _single_failurePercentageThreshold_codec.Read(input);
            if (failurePercentageThreshold_ == null || value != 0) {
              FailurePercentageThreshold = value;
            }
            break;
          }
          case 138: {
            uint? value = _single_enforcingFailurePercentage_codec.Read(input);
            if (enforcingFailurePercentage_ == null || value != 0) {
              EnforcingFailurePercentage = value;
            }
            break;
          }
          case 146: {
            uint? value = _single_enforcingFailurePercentageLocalOrigin_codec.Read(input);
            if (enforcingFailurePercentageLocalOrigin_ == null || value != 0) {
              EnforcingFailurePercentageLocalOrigin = value;
            }
            break;
          }
          case 154: {
            uint? value = _single_failurePercentageMinimumHosts_codec.Read(input);
            if (failurePercentageMinimumHosts_ == null || value != 0) {
              FailurePercentageMinimumHosts = value;
            }
            break;
          }
          case 162: {
            uint? value = _single_failurePercentageRequestVolume_codec.Read(input);
            if (failurePercentageRequestVolume_ == null || value != 0) {
              FailurePercentageRequestVolume = value;
            }
            break;
          }
          case 170: {
            if (maxEjectionTime_ == null) {
              MaxEjectionTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(MaxEjectionTime);
            break;
          }
          case 178: {
            if (maxEjectionTimeJitter_ == null) {
              MaxEjectionTimeJitter = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(MaxEjectionTimeJitter);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            uint? value = _single_consecutive5Xx_codec.Read(ref input);
            if (consecutive5Xx_ == null || value != 0) {
              Consecutive5Xx = value;
            }
            break;
          }
          case 18: {
            if (interval_ == null) {
              Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 26: {
            if (baseEjectionTime_ == null) {
              BaseEjectionTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(BaseEjectionTime);
            break;
          }
          case 34: {
            uint? value = _single_maxEjectionPercent_codec.Read(ref input);
            if (maxEjectionPercent_ == null || value != 0) {
              MaxEjectionPercent = value;
            }
            break;
          }
          case 42: {
            uint? value = _single_enforcingConsecutive5Xx_codec.Read(ref input);
            if (enforcingConsecutive5Xx_ == null || value != 0) {
              EnforcingConsecutive5Xx = value;
            }
            break;
          }
          case 50: {
            uint? value = _single_enforcingSuccessRate_codec.Read(ref input);
            if (enforcingSuccessRate_ == null || value != 0) {
              EnforcingSuccessRate = value;
            }
            break;
          }
          case 58: {
            uint? value = _single_successRateMinimumHosts_codec.Read(ref input);
            if (successRateMinimumHosts_ == null || value != 0) {
              SuccessRateMinimumHosts = value;
            }
            break;
          }
          case 66: {
            uint? value = _single_successRateRequestVolume_codec.Read(ref input);
            if (successRateRequestVolume_ == null || value != 0) {
              SuccessRateRequestVolume = value;
            }
            break;
          }
          case 74: {
            uint? value = _single_successRateStdevFactor_codec.Read(ref input);
            if (successRateStdevFactor_ == null || value != 0) {
              SuccessRateStdevFactor = value;
            }
            break;
          }
          case 82: {
            uint? value = _single_consecutiveGatewayFailure_codec.Read(ref input);
            if (consecutiveGatewayFailure_ == null || value != 0) {
              ConsecutiveGatewayFailure = value;
            }
            break;
          }
          case 90: {
            uint? value = _single_enforcingConsecutiveGatewayFailure_codec.Read(ref input);
            if (enforcingConsecutiveGatewayFailure_ == null || value != 0) {
              EnforcingConsecutiveGatewayFailure = value;
            }
            break;
          }
          case 96: {
            SplitExternalLocalOriginErrors = input.ReadBool();
            break;
          }
          case 106: {
            uint? value = _single_consecutiveLocalOriginFailure_codec.Read(ref input);
            if (consecutiveLocalOriginFailure_ == null || value != 0) {
              ConsecutiveLocalOriginFailure = value;
            }
            break;
          }
          case 114: {
            uint? value = _single_enforcingConsecutiveLocalOriginFailure_codec.Read(ref input);
            if (enforcingConsecutiveLocalOriginFailure_ == null || value != 0) {
              EnforcingConsecutiveLocalOriginFailure = value;
            }
            break;
          }
          case 122: {
            uint? value = _single_enforcingLocalOriginSuccessRate_codec.Read(ref input);
            if (enforcingLocalOriginSuccessRate_ == null || value != 0) {
              EnforcingLocalOriginSuccessRate = value;
            }
            break;
          }
          case 130: {
            uint? value = _single_failurePercentageThreshold_codec.Read(ref input);
            if (failurePercentageThreshold_ == null || value != 0) {
              FailurePercentageThreshold = value;
            }
            break;
          }
          case 138: {
            uint? value = _single_enforcingFailurePercentage_codec.Read(ref input);
            if (enforcingFailurePercentage_ == null || value != 0) {
              EnforcingFailurePercentage = value;
            }
            break;
          }
          case 146: {
            uint? value = _single_enforcingFailurePercentageLocalOrigin_codec.Read(ref input);
            if (enforcingFailurePercentageLocalOrigin_ == null || value != 0) {
              EnforcingFailurePercentageLocalOrigin = value;
            }
            break;
          }
          case 154: {
            uint? value = _single_failurePercentageMinimumHosts_codec.Read(ref input);
            if (failurePercentageMinimumHosts_ == null || value != 0) {
              FailurePercentageMinimumHosts = value;
            }
            break;
          }
          case 162: {
            uint? value = _single_failurePercentageRequestVolume_codec.Read(ref input);
            if (failurePercentageRequestVolume_ == null || value != 0) {
              FailurePercentageRequestVolume = value;
            }
            break;
          }
          case 170: {
            if (maxEjectionTime_ == null) {
              MaxEjectionTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(MaxEjectionTime);
            break;
          }
          case 178: {
            if (maxEjectionTimeJitter_ == null) {
              MaxEjectionTimeJitter = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(MaxEjectionTimeJitter);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
