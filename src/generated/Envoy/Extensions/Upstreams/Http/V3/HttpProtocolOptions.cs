// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/upstreams/http/v3/http_protocol_options.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.Upstreams.Http.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/upstreams/http/v3/http_protocol_options.proto</summary>
  public static partial class HttpProtocolOptionsReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/upstreams/http/v3/http_protocol_options.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HttpProtocolOptionsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj5lbnZveS9leHRlbnNpb25zL3Vwc3RyZWFtcy9odHRwL3YzL2h0dHBfcHJv",
            "dG9jb2xfb3B0aW9ucy5wcm90bxIiZW52b3kuZXh0ZW5zaW9ucy51cHN0cmVh",
            "bXMuaHR0cC52MxojZW52b3kvY29uZmlnL2NvcmUvdjMvcHJvdG9jb2wucHJv",
            "dG8aHXVkcGEvYW5ub3RhdGlvbnMvc3RhdHVzLnByb3RvGhd2YWxpZGF0ZS92",
            "YWxpZGF0ZS5wcm90byKXCwoTSHR0cFByb3RvY29sT3B0aW9ucxJPChxjb21t",
            "b25faHR0cF9wcm90b2NvbF9vcHRpb25zGAEgASgLMikuZW52b3kuY29uZmln",
            "LmNvcmUudjMuSHR0cFByb3RvY29sT3B0aW9ucxJZCh51cHN0cmVhbV9odHRw",
            "X3Byb3RvY29sX29wdGlvbnMYAiABKAsyMS5lbnZveS5jb25maWcuY29yZS52",
            "My5VcHN0cmVhbUh0dHBQcm90b2NvbE9wdGlvbnMSagoUZXhwbGljaXRfaHR0",
            "cF9jb25maWcYAyABKAsySi5lbnZveS5leHRlbnNpb25zLnVwc3RyZWFtcy5o",
            "dHRwLnYzLkh0dHBQcm90b2NvbE9wdGlvbnMuRXhwbGljaXRIdHRwQ29uZmln",
            "SAASeQoedXNlX2Rvd25zdHJlYW1fcHJvdG9jb2xfY29uZmlnGAQgASgLMk8u",
            "ZW52b3kuZXh0ZW5zaW9ucy51cHN0cmVhbXMuaHR0cC52My5IdHRwUHJvdG9j",
            "b2xPcHRpb25zLlVzZURvd25zdHJlYW1IdHRwQ29uZmlnSAASXQoLYXV0b19j",
            "b25maWcYBSABKAsyRi5lbnZveS5leHRlbnNpb25zLnVwc3RyZWFtcy5odHRw",
            "LnYzLkh0dHBQcm90b2NvbE9wdGlvbnMuQXV0b0h0dHBDb25maWdIABqVAgoS",
            "RXhwbGljaXRIdHRwQ29uZmlnEksKFWh0dHBfcHJvdG9jb2xfb3B0aW9ucxgB",
            "IAEoCzIqLmVudm95LmNvbmZpZy5jb3JlLnYzLkh0dHAxUHJvdG9jb2xPcHRp",
            "b25zSAASTAoWaHR0cDJfcHJvdG9jb2xfb3B0aW9ucxgCIAEoCzIqLmVudm95",
            "LmNvbmZpZy5jb3JlLnYzLkh0dHAyUHJvdG9jb2xPcHRpb25zSAASTAoWaHR0",
            "cDNfcHJvdG9jb2xfb3B0aW9ucxgDIAEoCzIqLmVudm95LmNvbmZpZy5jb3Jl",
            "LnYzLkh0dHAzUHJvdG9jb2xPcHRpb25zSABCFgoPcHJvdG9jb2xfY29uZmln",
            "EgP4QgEa/AEKF1VzZURvd25zdHJlYW1IdHRwQ29uZmlnEkkKFWh0dHBfcHJv",
            "dG9jb2xfb3B0aW9ucxgBIAEoCzIqLmVudm95LmNvbmZpZy5jb3JlLnYzLkh0",
            "dHAxUHJvdG9jb2xPcHRpb25zEkoKFmh0dHAyX3Byb3RvY29sX29wdGlvbnMY",
            "AiABKAsyKi5lbnZveS5jb25maWcuY29yZS52My5IdHRwMlByb3RvY29sT3B0",
            "aW9ucxJKChZodHRwM19wcm90b2NvbF9vcHRpb25zGAMgASgLMiouZW52b3ku",
            "Y29uZmlnLmNvcmUudjMuSHR0cDNQcm90b2NvbE9wdGlvbnMa1AIKDkF1dG9I",
            "dHRwQ29uZmlnEkkKFWh0dHBfcHJvdG9jb2xfb3B0aW9ucxgBIAEoCzIqLmVu",
            "dm95LmNvbmZpZy5jb3JlLnYzLkh0dHAxUHJvdG9jb2xPcHRpb25zEkoKFmh0",
            "dHAyX3Byb3RvY29sX29wdGlvbnMYAiABKAsyKi5lbnZveS5jb25maWcuY29y",
            "ZS52My5IdHRwMlByb3RvY29sT3B0aW9ucxJKChZodHRwM19wcm90b2NvbF9v",
            "cHRpb25zGAMgASgLMiouZW52b3kuY29uZmlnLmNvcmUudjMuSHR0cDNQcm90",
            "b2NvbE9wdGlvbnMSXwohYWx0ZXJuYXRlX3Byb3RvY29sc19jYWNoZV9vcHRp",
            "b25zGAQgASgLMjQuZW52b3kuY29uZmlnLmNvcmUudjMuQWx0ZXJuYXRlUHJv",
            "dG9jb2xzQ2FjaGVPcHRpb25zQiAKGXVwc3RyZWFtX3Byb3RvY29sX29wdGlv",
            "bnMSA/hCAUKoAQowaW8uZW52b3lwcm94eS5lbnZveS5leHRlbnNpb25zLnVw",
            "c3RyZWFtcy5odHRwLnYzQhhIdHRwUHJvdG9jb2xPcHRpb25zUHJvdG9QAVpQ",
            "Z2l0aHViLmNvbS9lbnZveXByb3h5L2dvLWNvbnRyb2wtcGxhbmUvZW52b3kv",
            "ZXh0ZW5zaW9ucy91cHN0cmVhbXMvaHR0cC92MztodHRwdjO6gMjRBgIQAmIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Core.V3.ProtocolReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions), global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Parser, new[]{ "CommonHttpProtocolOptions", "UpstreamHttpProtocolOptions", "ExplicitHttpConfig", "UseDownstreamProtocolConfig", "AutoConfig" }, new[]{ "UpstreamProtocolOptions" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.ExplicitHttpConfig), global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.ExplicitHttpConfig.Parser, new[]{ "HttpProtocolOptions", "Http2ProtocolOptions", "Http3ProtocolOptions" }, new[]{ "ProtocolConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.UseDownstreamHttpConfig), global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.UseDownstreamHttpConfig.Parser, new[]{ "HttpProtocolOptions", "Http2ProtocolOptions", "Http3ProtocolOptions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.AutoHttpConfig), global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.AutoHttpConfig.Parser, new[]{ "HttpProtocolOptions", "Http2ProtocolOptions", "Http3ProtocolOptions", "AlternateProtocolsCacheOptions" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// HttpProtocolOptions specifies Http upstream protocol options. This object
  /// is used in
  /// :ref:`typed_extension_protocol_options&lt;envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`,
  /// keyed by the name `envoy.extensions.upstreams.http.v3.HttpProtocolOptions`.
  ///
  /// This controls what protocol(s) should be used for upstream and how said protocol(s) are configured.
  ///
  /// This replaces the prior pattern of explicit protocol configuration directly
  /// in the cluster. So a configuration like this, explicitly configuring the use of HTTP/2 upstream:
  ///
  /// .. code::
  ///
  ///   clusters:
  ///     - name: some_service
  ///       connect_timeout: 5s
  ///       upstream_http_protocol_options:
  ///         auto_sni: true
  ///       common_http_protocol_options:
  ///         idle_timeout: 1s
  ///       http2_protocol_options:
  ///         max_concurrent_streams: 100
  ///        .... [further cluster config]
  ///
  /// Would now look like this:
  ///
  /// .. code::
  ///
  ///   clusters:
  ///     - name: some_service
  ///       connect_timeout: 5s
  ///       typed_extension_protocol_options:
  ///         envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
  ///           "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
  ///           upstream_http_protocol_options:
  ///             auto_sni: true
  ///           common_http_protocol_options:
  ///             idle_timeout: 1s
  ///           explicit_http_config:
  ///             http2_protocol_options:
  ///               max_concurrent_streams: 100
  ///        .... [further cluster config]
  /// [#next-free-field: 6]
  /// </summary>
  public sealed partial class HttpProtocolOptions : pb::IMessage<HttpProtocolOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HttpProtocolOptions> _parser = new pb::MessageParser<HttpProtocolOptions>(() => new HttpProtocolOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HttpProtocolOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HttpProtocolOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HttpProtocolOptions(HttpProtocolOptions other) : this() {
      commonHttpProtocolOptions_ = other.commonHttpProtocolOptions_ != null ? other.commonHttpProtocolOptions_.Clone() : null;
      upstreamHttpProtocolOptions_ = other.upstreamHttpProtocolOptions_ != null ? other.upstreamHttpProtocolOptions_.Clone() : null;
      switch (other.UpstreamProtocolOptionsCase) {
        case UpstreamProtocolOptionsOneofCase.ExplicitHttpConfig:
          ExplicitHttpConfig = other.ExplicitHttpConfig.Clone();
          break;
        case UpstreamProtocolOptionsOneofCase.UseDownstreamProtocolConfig:
          UseDownstreamProtocolConfig = other.UseDownstreamProtocolConfig.Clone();
          break;
        case UpstreamProtocolOptionsOneofCase.AutoConfig:
          AutoConfig = other.AutoConfig.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HttpProtocolOptions Clone() {
      return new HttpProtocolOptions(this);
    }

    /// <summary>Field number for the "common_http_protocol_options" field.</summary>
    public const int CommonHttpProtocolOptionsFieldNumber = 1;
    private global::Envoy.Config.Core.V3.HttpProtocolOptions commonHttpProtocolOptions_;
    /// <summary>
    /// This contains options common across HTTP/1 and HTTP/2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.HttpProtocolOptions CommonHttpProtocolOptions {
      get { return commonHttpProtocolOptions_; }
      set {
        commonHttpProtocolOptions_ = value;
      }
    }

    /// <summary>Field number for the "upstream_http_protocol_options" field.</summary>
    public const int UpstreamHttpProtocolOptionsFieldNumber = 2;
    private global::Envoy.Config.Core.V3.UpstreamHttpProtocolOptions upstreamHttpProtocolOptions_;
    /// <summary>
    /// This contains common protocol options which are only applied upstream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.UpstreamHttpProtocolOptions UpstreamHttpProtocolOptions {
      get { return upstreamHttpProtocolOptions_; }
      set {
        upstreamHttpProtocolOptions_ = value;
      }
    }

    /// <summary>Field number for the "explicit_http_config" field.</summary>
    public const int ExplicitHttpConfigFieldNumber = 3;
    /// <summary>
    /// To explicitly configure either HTTP/1 or HTTP/2 (but not both!) use *explicit_http_config*.
    /// If the *explicit_http_config* is empty, HTTP/1.1 is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.ExplicitHttpConfig ExplicitHttpConfig {
      get { return upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.ExplicitHttpConfig ? (global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.ExplicitHttpConfig) upstreamProtocolOptions_ : null; }
      set {
        upstreamProtocolOptions_ = value;
        upstreamProtocolOptionsCase_ = value == null ? UpstreamProtocolOptionsOneofCase.None : UpstreamProtocolOptionsOneofCase.ExplicitHttpConfig;
      }
    }

    /// <summary>Field number for the "use_downstream_protocol_config" field.</summary>
    public const int UseDownstreamProtocolConfigFieldNumber = 4;
    /// <summary>
    /// This allows switching on protocol based on what protocol the downstream
    /// connection used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.UseDownstreamHttpConfig UseDownstreamProtocolConfig {
      get { return upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.UseDownstreamProtocolConfig ? (global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.UseDownstreamHttpConfig) upstreamProtocolOptions_ : null; }
      set {
        upstreamProtocolOptions_ = value;
        upstreamProtocolOptionsCase_ = value == null ? UpstreamProtocolOptionsOneofCase.None : UpstreamProtocolOptionsOneofCase.UseDownstreamProtocolConfig;
      }
    }

    /// <summary>Field number for the "auto_config" field.</summary>
    public const int AutoConfigFieldNumber = 5;
    /// <summary>
    /// This allows switching on protocol based on ALPN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.AutoHttpConfig AutoConfig {
      get { return upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.AutoConfig ? (global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.AutoHttpConfig) upstreamProtocolOptions_ : null; }
      set {
        upstreamProtocolOptions_ = value;
        upstreamProtocolOptionsCase_ = value == null ? UpstreamProtocolOptionsOneofCase.None : UpstreamProtocolOptionsOneofCase.AutoConfig;
      }
    }

    private object upstreamProtocolOptions_;
    /// <summary>Enum of possible cases for the "upstream_protocol_options" oneof.</summary>
    public enum UpstreamProtocolOptionsOneofCase {
      None = 0,
      ExplicitHttpConfig = 3,
      UseDownstreamProtocolConfig = 4,
      AutoConfig = 5,
    }
    private UpstreamProtocolOptionsOneofCase upstreamProtocolOptionsCase_ = UpstreamProtocolOptionsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpstreamProtocolOptionsOneofCase UpstreamProtocolOptionsCase {
      get { return upstreamProtocolOptionsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpstreamProtocolOptions() {
      upstreamProtocolOptionsCase_ = UpstreamProtocolOptionsOneofCase.None;
      upstreamProtocolOptions_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HttpProtocolOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HttpProtocolOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonHttpProtocolOptions, other.CommonHttpProtocolOptions)) return false;
      if (!object.Equals(UpstreamHttpProtocolOptions, other.UpstreamHttpProtocolOptions)) return false;
      if (!object.Equals(ExplicitHttpConfig, other.ExplicitHttpConfig)) return false;
      if (!object.Equals(UseDownstreamProtocolConfig, other.UseDownstreamProtocolConfig)) return false;
      if (!object.Equals(AutoConfig, other.AutoConfig)) return false;
      if (UpstreamProtocolOptionsCase != other.UpstreamProtocolOptionsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (commonHttpProtocolOptions_ != null) hash ^= CommonHttpProtocolOptions.GetHashCode();
      if (upstreamHttpProtocolOptions_ != null) hash ^= UpstreamHttpProtocolOptions.GetHashCode();
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.ExplicitHttpConfig) hash ^= ExplicitHttpConfig.GetHashCode();
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.UseDownstreamProtocolConfig) hash ^= UseDownstreamProtocolConfig.GetHashCode();
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.AutoConfig) hash ^= AutoConfig.GetHashCode();
      hash ^= (int) upstreamProtocolOptionsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (commonHttpProtocolOptions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonHttpProtocolOptions);
      }
      if (upstreamHttpProtocolOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpstreamHttpProtocolOptions);
      }
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.ExplicitHttpConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(ExplicitHttpConfig);
      }
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.UseDownstreamProtocolConfig) {
        output.WriteRawTag(34);
        output.WriteMessage(UseDownstreamProtocolConfig);
      }
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.AutoConfig) {
        output.WriteRawTag(42);
        output.WriteMessage(AutoConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (commonHttpProtocolOptions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonHttpProtocolOptions);
      }
      if (upstreamHttpProtocolOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpstreamHttpProtocolOptions);
      }
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.ExplicitHttpConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(ExplicitHttpConfig);
      }
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.UseDownstreamProtocolConfig) {
        output.WriteRawTag(34);
        output.WriteMessage(UseDownstreamProtocolConfig);
      }
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.AutoConfig) {
        output.WriteRawTag(42);
        output.WriteMessage(AutoConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (commonHttpProtocolOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonHttpProtocolOptions);
      }
      if (upstreamHttpProtocolOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpstreamHttpProtocolOptions);
      }
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.ExplicitHttpConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExplicitHttpConfig);
      }
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.UseDownstreamProtocolConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UseDownstreamProtocolConfig);
      }
      if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.AutoConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutoConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HttpProtocolOptions other) {
      if (other == null) {
        return;
      }
      if (other.commonHttpProtocolOptions_ != null) {
        if (commonHttpProtocolOptions_ == null) {
          CommonHttpProtocolOptions = new global::Envoy.Config.Core.V3.HttpProtocolOptions();
        }
        CommonHttpProtocolOptions.MergeFrom(other.CommonHttpProtocolOptions);
      }
      if (other.upstreamHttpProtocolOptions_ != null) {
        if (upstreamHttpProtocolOptions_ == null) {
          UpstreamHttpProtocolOptions = new global::Envoy.Config.Core.V3.UpstreamHttpProtocolOptions();
        }
        UpstreamHttpProtocolOptions.MergeFrom(other.UpstreamHttpProtocolOptions);
      }
      switch (other.UpstreamProtocolOptionsCase) {
        case UpstreamProtocolOptionsOneofCase.ExplicitHttpConfig:
          if (ExplicitHttpConfig == null) {
            ExplicitHttpConfig = new global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.ExplicitHttpConfig();
          }
          ExplicitHttpConfig.MergeFrom(other.ExplicitHttpConfig);
          break;
        case UpstreamProtocolOptionsOneofCase.UseDownstreamProtocolConfig:
          if (UseDownstreamProtocolConfig == null) {
            UseDownstreamProtocolConfig = new global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.UseDownstreamHttpConfig();
          }
          UseDownstreamProtocolConfig.MergeFrom(other.UseDownstreamProtocolConfig);
          break;
        case UpstreamProtocolOptionsOneofCase.AutoConfig:
          if (AutoConfig == null) {
            AutoConfig = new global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.AutoHttpConfig();
          }
          AutoConfig.MergeFrom(other.AutoConfig);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commonHttpProtocolOptions_ == null) {
              CommonHttpProtocolOptions = new global::Envoy.Config.Core.V3.HttpProtocolOptions();
            }
            input.ReadMessage(CommonHttpProtocolOptions);
            break;
          }
          case 18: {
            if (upstreamHttpProtocolOptions_ == null) {
              UpstreamHttpProtocolOptions = new global::Envoy.Config.Core.V3.UpstreamHttpProtocolOptions();
            }
            input.ReadMessage(UpstreamHttpProtocolOptions);
            break;
          }
          case 26: {
            global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.ExplicitHttpConfig subBuilder = new global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.ExplicitHttpConfig();
            if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.ExplicitHttpConfig) {
              subBuilder.MergeFrom(ExplicitHttpConfig);
            }
            input.ReadMessage(subBuilder);
            ExplicitHttpConfig = subBuilder;
            break;
          }
          case 34: {
            global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.UseDownstreamHttpConfig subBuilder = new global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.UseDownstreamHttpConfig();
            if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.UseDownstreamProtocolConfig) {
              subBuilder.MergeFrom(UseDownstreamProtocolConfig);
            }
            input.ReadMessage(subBuilder);
            UseDownstreamProtocolConfig = subBuilder;
            break;
          }
          case 42: {
            global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.AutoHttpConfig subBuilder = new global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.AutoHttpConfig();
            if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.AutoConfig) {
              subBuilder.MergeFrom(AutoConfig);
            }
            input.ReadMessage(subBuilder);
            AutoConfig = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (commonHttpProtocolOptions_ == null) {
              CommonHttpProtocolOptions = new global::Envoy.Config.Core.V3.HttpProtocolOptions();
            }
            input.ReadMessage(CommonHttpProtocolOptions);
            break;
          }
          case 18: {
            if (upstreamHttpProtocolOptions_ == null) {
              UpstreamHttpProtocolOptions = new global::Envoy.Config.Core.V3.UpstreamHttpProtocolOptions();
            }
            input.ReadMessage(UpstreamHttpProtocolOptions);
            break;
          }
          case 26: {
            global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.ExplicitHttpConfig subBuilder = new global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.ExplicitHttpConfig();
            if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.ExplicitHttpConfig) {
              subBuilder.MergeFrom(ExplicitHttpConfig);
            }
            input.ReadMessage(subBuilder);
            ExplicitHttpConfig = subBuilder;
            break;
          }
          case 34: {
            global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.UseDownstreamHttpConfig subBuilder = new global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.UseDownstreamHttpConfig();
            if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.UseDownstreamProtocolConfig) {
              subBuilder.MergeFrom(UseDownstreamProtocolConfig);
            }
            input.ReadMessage(subBuilder);
            UseDownstreamProtocolConfig = subBuilder;
            break;
          }
          case 42: {
            global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.AutoHttpConfig subBuilder = new global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Types.AutoHttpConfig();
            if (upstreamProtocolOptionsCase_ == UpstreamProtocolOptionsOneofCase.AutoConfig) {
              subBuilder.MergeFrom(AutoConfig);
            }
            input.ReadMessage(subBuilder);
            AutoConfig = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the HttpProtocolOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// If this is used, the cluster will only operate on one of the possible upstream protocols.
      /// Note that HTTP/2 or above should generally be used for upstream gRPC clusters.
      /// </summary>
      public sealed partial class ExplicitHttpConfig : pb::IMessage<ExplicitHttpConfig>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ExplicitHttpConfig> _parser = new pb::MessageParser<ExplicitHttpConfig>(() => new ExplicitHttpConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ExplicitHttpConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ExplicitHttpConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ExplicitHttpConfig(ExplicitHttpConfig other) : this() {
          switch (other.ProtocolConfigCase) {
            case ProtocolConfigOneofCase.HttpProtocolOptions:
              HttpProtocolOptions = other.HttpProtocolOptions.Clone();
              break;
            case ProtocolConfigOneofCase.Http2ProtocolOptions:
              Http2ProtocolOptions = other.Http2ProtocolOptions.Clone();
              break;
            case ProtocolConfigOneofCase.Http3ProtocolOptions:
              Http3ProtocolOptions = other.Http3ProtocolOptions.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ExplicitHttpConfig Clone() {
          return new ExplicitHttpConfig(this);
        }

        /// <summary>Field number for the "http_protocol_options" field.</summary>
        public const int HttpProtocolOptionsFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.Http1ProtocolOptions HttpProtocolOptions {
          get { return protocolConfigCase_ == ProtocolConfigOneofCase.HttpProtocolOptions ? (global::Envoy.Config.Core.V3.Http1ProtocolOptions) protocolConfig_ : null; }
          set {
            protocolConfig_ = value;
            protocolConfigCase_ = value == null ? ProtocolConfigOneofCase.None : ProtocolConfigOneofCase.HttpProtocolOptions;
          }
        }

        /// <summary>Field number for the "http2_protocol_options" field.</summary>
        public const int Http2ProtocolOptionsFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.Http2ProtocolOptions Http2ProtocolOptions {
          get { return protocolConfigCase_ == ProtocolConfigOneofCase.Http2ProtocolOptions ? (global::Envoy.Config.Core.V3.Http2ProtocolOptions) protocolConfig_ : null; }
          set {
            protocolConfig_ = value;
            protocolConfigCase_ = value == null ? ProtocolConfigOneofCase.None : ProtocolConfigOneofCase.Http2ProtocolOptions;
          }
        }

        /// <summary>Field number for the "http3_protocol_options" field.</summary>
        public const int Http3ProtocolOptionsFieldNumber = 3;
        /// <summary>
        /// .. warning::
        ///   QUIC upstream support is currently not ready for internet use.
        ///   Please see :ref:`here &lt;arch_overview_http3>` for details.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.Http3ProtocolOptions Http3ProtocolOptions {
          get { return protocolConfigCase_ == ProtocolConfigOneofCase.Http3ProtocolOptions ? (global::Envoy.Config.Core.V3.Http3ProtocolOptions) protocolConfig_ : null; }
          set {
            protocolConfig_ = value;
            protocolConfigCase_ = value == null ? ProtocolConfigOneofCase.None : ProtocolConfigOneofCase.Http3ProtocolOptions;
          }
        }

        private object protocolConfig_;
        /// <summary>Enum of possible cases for the "protocol_config" oneof.</summary>
        public enum ProtocolConfigOneofCase {
          None = 0,
          HttpProtocolOptions = 1,
          Http2ProtocolOptions = 2,
          Http3ProtocolOptions = 3,
        }
        private ProtocolConfigOneofCase protocolConfigCase_ = ProtocolConfigOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ProtocolConfigOneofCase ProtocolConfigCase {
          get { return protocolConfigCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearProtocolConfig() {
          protocolConfigCase_ = ProtocolConfigOneofCase.None;
          protocolConfig_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ExplicitHttpConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ExplicitHttpConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(HttpProtocolOptions, other.HttpProtocolOptions)) return false;
          if (!object.Equals(Http2ProtocolOptions, other.Http2ProtocolOptions)) return false;
          if (!object.Equals(Http3ProtocolOptions, other.Http3ProtocolOptions)) return false;
          if (ProtocolConfigCase != other.ProtocolConfigCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (protocolConfigCase_ == ProtocolConfigOneofCase.HttpProtocolOptions) hash ^= HttpProtocolOptions.GetHashCode();
          if (protocolConfigCase_ == ProtocolConfigOneofCase.Http2ProtocolOptions) hash ^= Http2ProtocolOptions.GetHashCode();
          if (protocolConfigCase_ == ProtocolConfigOneofCase.Http3ProtocolOptions) hash ^= Http3ProtocolOptions.GetHashCode();
          hash ^= (int) protocolConfigCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (protocolConfigCase_ == ProtocolConfigOneofCase.HttpProtocolOptions) {
            output.WriteRawTag(10);
            output.WriteMessage(HttpProtocolOptions);
          }
          if (protocolConfigCase_ == ProtocolConfigOneofCase.Http2ProtocolOptions) {
            output.WriteRawTag(18);
            output.WriteMessage(Http2ProtocolOptions);
          }
          if (protocolConfigCase_ == ProtocolConfigOneofCase.Http3ProtocolOptions) {
            output.WriteRawTag(26);
            output.WriteMessage(Http3ProtocolOptions);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (protocolConfigCase_ == ProtocolConfigOneofCase.HttpProtocolOptions) {
            output.WriteRawTag(10);
            output.WriteMessage(HttpProtocolOptions);
          }
          if (protocolConfigCase_ == ProtocolConfigOneofCase.Http2ProtocolOptions) {
            output.WriteRawTag(18);
            output.WriteMessage(Http2ProtocolOptions);
          }
          if (protocolConfigCase_ == ProtocolConfigOneofCase.Http3ProtocolOptions) {
            output.WriteRawTag(26);
            output.WriteMessage(Http3ProtocolOptions);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (protocolConfigCase_ == ProtocolConfigOneofCase.HttpProtocolOptions) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpProtocolOptions);
          }
          if (protocolConfigCase_ == ProtocolConfigOneofCase.Http2ProtocolOptions) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Http2ProtocolOptions);
          }
          if (protocolConfigCase_ == ProtocolConfigOneofCase.Http3ProtocolOptions) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Http3ProtocolOptions);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ExplicitHttpConfig other) {
          if (other == null) {
            return;
          }
          switch (other.ProtocolConfigCase) {
            case ProtocolConfigOneofCase.HttpProtocolOptions:
              if (HttpProtocolOptions == null) {
                HttpProtocolOptions = new global::Envoy.Config.Core.V3.Http1ProtocolOptions();
              }
              HttpProtocolOptions.MergeFrom(other.HttpProtocolOptions);
              break;
            case ProtocolConfigOneofCase.Http2ProtocolOptions:
              if (Http2ProtocolOptions == null) {
                Http2ProtocolOptions = new global::Envoy.Config.Core.V3.Http2ProtocolOptions();
              }
              Http2ProtocolOptions.MergeFrom(other.Http2ProtocolOptions);
              break;
            case ProtocolConfigOneofCase.Http3ProtocolOptions:
              if (Http3ProtocolOptions == null) {
                Http3ProtocolOptions = new global::Envoy.Config.Core.V3.Http3ProtocolOptions();
              }
              Http3ProtocolOptions.MergeFrom(other.Http3ProtocolOptions);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Envoy.Config.Core.V3.Http1ProtocolOptions subBuilder = new global::Envoy.Config.Core.V3.Http1ProtocolOptions();
                if (protocolConfigCase_ == ProtocolConfigOneofCase.HttpProtocolOptions) {
                  subBuilder.MergeFrom(HttpProtocolOptions);
                }
                input.ReadMessage(subBuilder);
                HttpProtocolOptions = subBuilder;
                break;
              }
              case 18: {
                global::Envoy.Config.Core.V3.Http2ProtocolOptions subBuilder = new global::Envoy.Config.Core.V3.Http2ProtocolOptions();
                if (protocolConfigCase_ == ProtocolConfigOneofCase.Http2ProtocolOptions) {
                  subBuilder.MergeFrom(Http2ProtocolOptions);
                }
                input.ReadMessage(subBuilder);
                Http2ProtocolOptions = subBuilder;
                break;
              }
              case 26: {
                global::Envoy.Config.Core.V3.Http3ProtocolOptions subBuilder = new global::Envoy.Config.Core.V3.Http3ProtocolOptions();
                if (protocolConfigCase_ == ProtocolConfigOneofCase.Http3ProtocolOptions) {
                  subBuilder.MergeFrom(Http3ProtocolOptions);
                }
                input.ReadMessage(subBuilder);
                Http3ProtocolOptions = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Envoy.Config.Core.V3.Http1ProtocolOptions subBuilder = new global::Envoy.Config.Core.V3.Http1ProtocolOptions();
                if (protocolConfigCase_ == ProtocolConfigOneofCase.HttpProtocolOptions) {
                  subBuilder.MergeFrom(HttpProtocolOptions);
                }
                input.ReadMessage(subBuilder);
                HttpProtocolOptions = subBuilder;
                break;
              }
              case 18: {
                global::Envoy.Config.Core.V3.Http2ProtocolOptions subBuilder = new global::Envoy.Config.Core.V3.Http2ProtocolOptions();
                if (protocolConfigCase_ == ProtocolConfigOneofCase.Http2ProtocolOptions) {
                  subBuilder.MergeFrom(Http2ProtocolOptions);
                }
                input.ReadMessage(subBuilder);
                Http2ProtocolOptions = subBuilder;
                break;
              }
              case 26: {
                global::Envoy.Config.Core.V3.Http3ProtocolOptions subBuilder = new global::Envoy.Config.Core.V3.Http3ProtocolOptions();
                if (protocolConfigCase_ == ProtocolConfigOneofCase.Http3ProtocolOptions) {
                  subBuilder.MergeFrom(Http3ProtocolOptions);
                }
                input.ReadMessage(subBuilder);
                Http3ProtocolOptions = subBuilder;
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// If this is used, the cluster can use either of the configured protocols, and
      /// will use whichever protocol was used by the downstream connection.
      ///
      /// If HTTP/3 is configured for downstream and not configured for upstream,
      /// HTTP/3 requests will fail over to HTTP/2.
      /// </summary>
      public sealed partial class UseDownstreamHttpConfig : pb::IMessage<UseDownstreamHttpConfig>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UseDownstreamHttpConfig> _parser = new pb::MessageParser<UseDownstreamHttpConfig>(() => new UseDownstreamHttpConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<UseDownstreamHttpConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UseDownstreamHttpConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UseDownstreamHttpConfig(UseDownstreamHttpConfig other) : this() {
          httpProtocolOptions_ = other.httpProtocolOptions_ != null ? other.httpProtocolOptions_.Clone() : null;
          http2ProtocolOptions_ = other.http2ProtocolOptions_ != null ? other.http2ProtocolOptions_.Clone() : null;
          http3ProtocolOptions_ = other.http3ProtocolOptions_ != null ? other.http3ProtocolOptions_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UseDownstreamHttpConfig Clone() {
          return new UseDownstreamHttpConfig(this);
        }

        /// <summary>Field number for the "http_protocol_options" field.</summary>
        public const int HttpProtocolOptionsFieldNumber = 1;
        private global::Envoy.Config.Core.V3.Http1ProtocolOptions httpProtocolOptions_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.Http1ProtocolOptions HttpProtocolOptions {
          get { return httpProtocolOptions_; }
          set {
            httpProtocolOptions_ = value;
          }
        }

        /// <summary>Field number for the "http2_protocol_options" field.</summary>
        public const int Http2ProtocolOptionsFieldNumber = 2;
        private global::Envoy.Config.Core.V3.Http2ProtocolOptions http2ProtocolOptions_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.Http2ProtocolOptions Http2ProtocolOptions {
          get { return http2ProtocolOptions_; }
          set {
            http2ProtocolOptions_ = value;
          }
        }

        /// <summary>Field number for the "http3_protocol_options" field.</summary>
        public const int Http3ProtocolOptionsFieldNumber = 3;
        private global::Envoy.Config.Core.V3.Http3ProtocolOptions http3ProtocolOptions_;
        /// <summary>
        /// .. warning::
        ///   QUIC upstream support is currently not ready for internet use.
        ///   Please see :ref:`here &lt;arch_overview_http3>` for details.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.Http3ProtocolOptions Http3ProtocolOptions {
          get { return http3ProtocolOptions_; }
          set {
            http3ProtocolOptions_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as UseDownstreamHttpConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(UseDownstreamHttpConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(HttpProtocolOptions, other.HttpProtocolOptions)) return false;
          if (!object.Equals(Http2ProtocolOptions, other.Http2ProtocolOptions)) return false;
          if (!object.Equals(Http3ProtocolOptions, other.Http3ProtocolOptions)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (httpProtocolOptions_ != null) hash ^= HttpProtocolOptions.GetHashCode();
          if (http2ProtocolOptions_ != null) hash ^= Http2ProtocolOptions.GetHashCode();
          if (http3ProtocolOptions_ != null) hash ^= Http3ProtocolOptions.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (httpProtocolOptions_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(HttpProtocolOptions);
          }
          if (http2ProtocolOptions_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Http2ProtocolOptions);
          }
          if (http3ProtocolOptions_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Http3ProtocolOptions);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (httpProtocolOptions_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(HttpProtocolOptions);
          }
          if (http2ProtocolOptions_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Http2ProtocolOptions);
          }
          if (http3ProtocolOptions_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Http3ProtocolOptions);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (httpProtocolOptions_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpProtocolOptions);
          }
          if (http2ProtocolOptions_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Http2ProtocolOptions);
          }
          if (http3ProtocolOptions_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Http3ProtocolOptions);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(UseDownstreamHttpConfig other) {
          if (other == null) {
            return;
          }
          if (other.httpProtocolOptions_ != null) {
            if (httpProtocolOptions_ == null) {
              HttpProtocolOptions = new global::Envoy.Config.Core.V3.Http1ProtocolOptions();
            }
            HttpProtocolOptions.MergeFrom(other.HttpProtocolOptions);
          }
          if (other.http2ProtocolOptions_ != null) {
            if (http2ProtocolOptions_ == null) {
              Http2ProtocolOptions = new global::Envoy.Config.Core.V3.Http2ProtocolOptions();
            }
            Http2ProtocolOptions.MergeFrom(other.Http2ProtocolOptions);
          }
          if (other.http3ProtocolOptions_ != null) {
            if (http3ProtocolOptions_ == null) {
              Http3ProtocolOptions = new global::Envoy.Config.Core.V3.Http3ProtocolOptions();
            }
            Http3ProtocolOptions.MergeFrom(other.Http3ProtocolOptions);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (httpProtocolOptions_ == null) {
                  HttpProtocolOptions = new global::Envoy.Config.Core.V3.Http1ProtocolOptions();
                }
                input.ReadMessage(HttpProtocolOptions);
                break;
              }
              case 18: {
                if (http2ProtocolOptions_ == null) {
                  Http2ProtocolOptions = new global::Envoy.Config.Core.V3.Http2ProtocolOptions();
                }
                input.ReadMessage(Http2ProtocolOptions);
                break;
              }
              case 26: {
                if (http3ProtocolOptions_ == null) {
                  Http3ProtocolOptions = new global::Envoy.Config.Core.V3.Http3ProtocolOptions();
                }
                input.ReadMessage(Http3ProtocolOptions);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (httpProtocolOptions_ == null) {
                  HttpProtocolOptions = new global::Envoy.Config.Core.V3.Http1ProtocolOptions();
                }
                input.ReadMessage(HttpProtocolOptions);
                break;
              }
              case 18: {
                if (http2ProtocolOptions_ == null) {
                  Http2ProtocolOptions = new global::Envoy.Config.Core.V3.Http2ProtocolOptions();
                }
                input.ReadMessage(Http2ProtocolOptions);
                break;
              }
              case 26: {
                if (http3ProtocolOptions_ == null) {
                  Http3ProtocolOptions = new global::Envoy.Config.Core.V3.Http3ProtocolOptions();
                }
                input.ReadMessage(Http3ProtocolOptions);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// If this is used, the cluster can use either HTTP/1 or HTTP/2, and will use whichever
      /// protocol is negotiated by ALPN with the upstream.
      /// Clusters configured with *AutoHttpConfig* will use the highest available
      /// protocol; HTTP/2 if supported, otherwise HTTP/1.
      /// If the upstream does not support ALPN, *AutoHttpConfig* will fail over to HTTP/1.
      /// This can only be used with transport sockets which support ALPN. Using a
      /// transport socket which does not support ALPN will result in configuration
      /// failure. The transport layer may be configured with custom ALPN, but the default ALPN
      /// for the cluster (or if custom ALPN fails) will be "h2,http/1.1".
      /// </summary>
      public sealed partial class AutoHttpConfig : pb::IMessage<AutoHttpConfig>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AutoHttpConfig> _parser = new pb::MessageParser<AutoHttpConfig>(() => new AutoHttpConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<AutoHttpConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Extensions.Upstreams.Http.V3.HttpProtocolOptions.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AutoHttpConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AutoHttpConfig(AutoHttpConfig other) : this() {
          httpProtocolOptions_ = other.httpProtocolOptions_ != null ? other.httpProtocolOptions_.Clone() : null;
          http2ProtocolOptions_ = other.http2ProtocolOptions_ != null ? other.http2ProtocolOptions_.Clone() : null;
          http3ProtocolOptions_ = other.http3ProtocolOptions_ != null ? other.http3ProtocolOptions_.Clone() : null;
          alternateProtocolsCacheOptions_ = other.alternateProtocolsCacheOptions_ != null ? other.alternateProtocolsCacheOptions_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AutoHttpConfig Clone() {
          return new AutoHttpConfig(this);
        }

        /// <summary>Field number for the "http_protocol_options" field.</summary>
        public const int HttpProtocolOptionsFieldNumber = 1;
        private global::Envoy.Config.Core.V3.Http1ProtocolOptions httpProtocolOptions_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.Http1ProtocolOptions HttpProtocolOptions {
          get { return httpProtocolOptions_; }
          set {
            httpProtocolOptions_ = value;
          }
        }

        /// <summary>Field number for the "http2_protocol_options" field.</summary>
        public const int Http2ProtocolOptionsFieldNumber = 2;
        private global::Envoy.Config.Core.V3.Http2ProtocolOptions http2ProtocolOptions_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.Http2ProtocolOptions Http2ProtocolOptions {
          get { return http2ProtocolOptions_; }
          set {
            http2ProtocolOptions_ = value;
          }
        }

        /// <summary>Field number for the "http3_protocol_options" field.</summary>
        public const int Http3ProtocolOptionsFieldNumber = 3;
        private global::Envoy.Config.Core.V3.Http3ProtocolOptions http3ProtocolOptions_;
        /// <summary>
        /// Unlike HTTP/1 and HTTP/2, HTTP/3 will not be configured unless it is
        /// present, and (soon) only if there is an indication of server side
        /// support.
        /// See :ref:`here &lt;arch_overview_http3_upstream>` for more information on
        /// when HTTP/3 will be used, and when Envoy will fail over to TCP.
        ///
        /// .. warning::
        ///   QUIC upstream support is currently not ready for internet use.
        ///   Please see :ref:`here &lt;arch_overview_http3>` for details.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.Http3ProtocolOptions Http3ProtocolOptions {
          get { return http3ProtocolOptions_; }
          set {
            http3ProtocolOptions_ = value;
          }
        }

        /// <summary>Field number for the "alternate_protocols_cache_options" field.</summary>
        public const int AlternateProtocolsCacheOptionsFieldNumber = 4;
        private global::Envoy.Config.Core.V3.AlternateProtocolsCacheOptions alternateProtocolsCacheOptions_;
        /// <summary>
        /// The presence of alternate protocols cache options causes the use of the
        /// alternate protocols cache, which is responsible for parsing and caching
        /// HTTP Alt-Svc headers. This enables the use of HTTP/3 for origins that
        /// advertise supporting it.
        ///
        /// .. note::
        ///   This is required when HTTP/3 is enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.AlternateProtocolsCacheOptions AlternateProtocolsCacheOptions {
          get { return alternateProtocolsCacheOptions_; }
          set {
            alternateProtocolsCacheOptions_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as AutoHttpConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(AutoHttpConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(HttpProtocolOptions, other.HttpProtocolOptions)) return false;
          if (!object.Equals(Http2ProtocolOptions, other.Http2ProtocolOptions)) return false;
          if (!object.Equals(Http3ProtocolOptions, other.Http3ProtocolOptions)) return false;
          if (!object.Equals(AlternateProtocolsCacheOptions, other.AlternateProtocolsCacheOptions)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (httpProtocolOptions_ != null) hash ^= HttpProtocolOptions.GetHashCode();
          if (http2ProtocolOptions_ != null) hash ^= Http2ProtocolOptions.GetHashCode();
          if (http3ProtocolOptions_ != null) hash ^= Http3ProtocolOptions.GetHashCode();
          if (alternateProtocolsCacheOptions_ != null) hash ^= AlternateProtocolsCacheOptions.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (httpProtocolOptions_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(HttpProtocolOptions);
          }
          if (http2ProtocolOptions_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Http2ProtocolOptions);
          }
          if (http3ProtocolOptions_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Http3ProtocolOptions);
          }
          if (alternateProtocolsCacheOptions_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(AlternateProtocolsCacheOptions);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (httpProtocolOptions_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(HttpProtocolOptions);
          }
          if (http2ProtocolOptions_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Http2ProtocolOptions);
          }
          if (http3ProtocolOptions_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Http3ProtocolOptions);
          }
          if (alternateProtocolsCacheOptions_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(AlternateProtocolsCacheOptions);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (httpProtocolOptions_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpProtocolOptions);
          }
          if (http2ProtocolOptions_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Http2ProtocolOptions);
          }
          if (http3ProtocolOptions_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Http3ProtocolOptions);
          }
          if (alternateProtocolsCacheOptions_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlternateProtocolsCacheOptions);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(AutoHttpConfig other) {
          if (other == null) {
            return;
          }
          if (other.httpProtocolOptions_ != null) {
            if (httpProtocolOptions_ == null) {
              HttpProtocolOptions = new global::Envoy.Config.Core.V3.Http1ProtocolOptions();
            }
            HttpProtocolOptions.MergeFrom(other.HttpProtocolOptions);
          }
          if (other.http2ProtocolOptions_ != null) {
            if (http2ProtocolOptions_ == null) {
              Http2ProtocolOptions = new global::Envoy.Config.Core.V3.Http2ProtocolOptions();
            }
            Http2ProtocolOptions.MergeFrom(other.Http2ProtocolOptions);
          }
          if (other.http3ProtocolOptions_ != null) {
            if (http3ProtocolOptions_ == null) {
              Http3ProtocolOptions = new global::Envoy.Config.Core.V3.Http3ProtocolOptions();
            }
            Http3ProtocolOptions.MergeFrom(other.Http3ProtocolOptions);
          }
          if (other.alternateProtocolsCacheOptions_ != null) {
            if (alternateProtocolsCacheOptions_ == null) {
              AlternateProtocolsCacheOptions = new global::Envoy.Config.Core.V3.AlternateProtocolsCacheOptions();
            }
            AlternateProtocolsCacheOptions.MergeFrom(other.AlternateProtocolsCacheOptions);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (httpProtocolOptions_ == null) {
                  HttpProtocolOptions = new global::Envoy.Config.Core.V3.Http1ProtocolOptions();
                }
                input.ReadMessage(HttpProtocolOptions);
                break;
              }
              case 18: {
                if (http2ProtocolOptions_ == null) {
                  Http2ProtocolOptions = new global::Envoy.Config.Core.V3.Http2ProtocolOptions();
                }
                input.ReadMessage(Http2ProtocolOptions);
                break;
              }
              case 26: {
                if (http3ProtocolOptions_ == null) {
                  Http3ProtocolOptions = new global::Envoy.Config.Core.V3.Http3ProtocolOptions();
                }
                input.ReadMessage(Http3ProtocolOptions);
                break;
              }
              case 34: {
                if (alternateProtocolsCacheOptions_ == null) {
                  AlternateProtocolsCacheOptions = new global::Envoy.Config.Core.V3.AlternateProtocolsCacheOptions();
                }
                input.ReadMessage(AlternateProtocolsCacheOptions);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (httpProtocolOptions_ == null) {
                  HttpProtocolOptions = new global::Envoy.Config.Core.V3.Http1ProtocolOptions();
                }
                input.ReadMessage(HttpProtocolOptions);
                break;
              }
              case 18: {
                if (http2ProtocolOptions_ == null) {
                  Http2ProtocolOptions = new global::Envoy.Config.Core.V3.Http2ProtocolOptions();
                }
                input.ReadMessage(Http2ProtocolOptions);
                break;
              }
              case 26: {
                if (http3ProtocolOptions_ == null) {
                  Http3ProtocolOptions = new global::Envoy.Config.Core.V3.Http3ProtocolOptions();
                }
                input.ReadMessage(Http3ProtocolOptions);
                break;
              }
              case 34: {
                if (alternateProtocolsCacheOptions_ == null) {
                  AlternateProtocolsCacheOptions = new global::Envoy.Config.Core.V3.AlternateProtocolsCacheOptions();
                }
                input.ReadMessage(AlternateProtocolsCacheOptions);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
