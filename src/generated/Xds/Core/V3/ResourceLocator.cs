// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xds/core/v3/resource_locator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xds.Core.V3 {

  /// <summary>Holder for reflection information generated from xds/core/v3/resource_locator.proto</summary>
  public static partial class ResourceLocatorReflection {

    #region Descriptor
    /// <summary>File descriptor for xds/core/v3/resource_locator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResourceLocatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJ4ZHMvY29yZS92My9yZXNvdXJjZV9sb2NhdG9yLnByb3RvEgt4ZHMuY29y",
            "ZS52MxofeGRzL2Fubm90YXRpb25zL3YzL3N0YXR1cy5wcm90bxogeGRzL2Nv",
            "cmUvdjMvY29udGV4dF9wYXJhbXMucHJvdG8aF3ZhbGlkYXRlL3ZhbGlkYXRl",
            "LnByb3RvIsIDCg9SZXNvdXJjZUxvY2F0b3ISPQoGc2NoZW1lGAEgASgOMiMu",
            "eGRzLmNvcmUudjMuUmVzb3VyY2VMb2NhdG9yLlNjaGVtZUII+kIFggECEAES",
            "CgoCaWQYAiABKAkSEQoJYXV0aG9yaXR5GAMgASgJEh4KDXJlc291cmNlX3R5",
            "cGUYBCABKAlCB/pCBHICEAESMwoNZXhhY3RfY29udGV4dBgFIAEoCzIaLnhk",
            "cy5jb3JlLnYzLkNvbnRleHRQYXJhbXNIABI6CgpkaXJlY3RpdmVzGAYgAygL",
            "MiYueGRzLmNvcmUudjMuUmVzb3VyY2VMb2NhdG9yLkRpcmVjdGl2ZRp8CglE",
            "aXJlY3RpdmUSKwoDYWx0GAEgASgLMhwueGRzLmNvcmUudjMuUmVzb3VyY2VM",
            "b2NhdG9ySAASMAoFZW50cnkYAiABKAlCH/pCHHIaEAEyFl5bMC05YS16QS1a",
            "X1wtXC4vfjpdKyRIAEIQCglkaXJlY3RpdmUSA/hCASInCgZTY2hlbWUSCQoF",
            "WERTVFAQABIICgRIVFRQEAESCAoERklMRRACQhkKF2NvbnRleHRfcGFyYW1f",
            "c3BlY2lmaWVyQlwKFmNvbS5naXRodWIueGRzLmNvcmUudjNCFFJlc291cmNl",
            "TG9jYXRvclByb3RvUAFaImdpdGh1Yi5jb20vY25jZi94ZHMvZ28veGRzL2Nv",
            "cmUvdjPSxqThBgIIAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xds.Annotations.V3.StatusReflection.Descriptor, global::Xds.Core.V3.ContextParamsReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xds.Core.V3.ResourceLocator), global::Xds.Core.V3.ResourceLocator.Parser, new[]{ "Scheme", "Id", "Authority", "ResourceType", "ExactContext", "Directives" }, new[]{ "ContextParamSpecifier" }, new[]{ typeof(global::Xds.Core.V3.ResourceLocator.Types.Scheme) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Xds.Core.V3.ResourceLocator.Types.Directive), global::Xds.Core.V3.ResourceLocator.Types.Directive.Parser, new[]{ "Alt", "Entry" }, new[]{ "Directive" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// xDS resource locators identify a xDS resource name and instruct the
  /// data-plane load balancer on how the resource may be located.
  ///
  /// Resource locators have a canonical xdstp:// URI representation:
  ///
  ///   xdstp://{authority}/{type_url}/{id}?{context_params}{#directive,*}
  ///
  /// where context_params take the form of URI query parameters.
  ///
  /// Resource locators have a similar canonical http:// URI representation:
  ///
  ///   http://{authority}/{type_url}/{id}?{context_params}{#directive,*}
  ///
  /// Resource locators also have a simplified file:// URI representation:
  ///
  ///   file:///{id}{#directive,*}
  /// </summary>
  public sealed partial class ResourceLocator : pb::IMessage<ResourceLocator>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ResourceLocator> _parser = new pb::MessageParser<ResourceLocator>(() => new ResourceLocator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ResourceLocator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xds.Core.V3.ResourceLocatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResourceLocator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResourceLocator(ResourceLocator other) : this() {
      scheme_ = other.scheme_;
      id_ = other.id_;
      authority_ = other.authority_;
      resourceType_ = other.resourceType_;
      directives_ = other.directives_.Clone();
      switch (other.ContextParamSpecifierCase) {
        case ContextParamSpecifierOneofCase.ExactContext:
          ExactContext = other.ExactContext.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResourceLocator Clone() {
      return new ResourceLocator(this);
    }

    /// <summary>Field number for the "scheme" field.</summary>
    public const int SchemeFieldNumber = 1;
    private global::Xds.Core.V3.ResourceLocator.Types.Scheme scheme_ = global::Xds.Core.V3.ResourceLocator.Types.Scheme.Xdstp;
    /// <summary>
    /// URI scheme.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xds.Core.V3.ResourceLocator.Types.Scheme Scheme {
      get { return scheme_; }
      set {
        scheme_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// Opaque identifier for the resource. Any '/' will not be escaped during URI
    /// encoding and will form part of the URI path. This may end
    /// with ‘*’ for glob collection references.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authority" field.</summary>
    public const int AuthorityFieldNumber = 3;
    private string authority_ = "";
    /// <summary>
    /// Logical authority for resource (not necessarily transport network address).
    /// Authorities are opaque in the xDS API, data-plane load balancers will map
    /// them to concrete network transports such as an xDS management server, e.g.
    /// via envoy.config.core.v3.ConfigSource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Authority {
      get { return authority_; }
      set {
        authority_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_type" field.</summary>
    public const int ResourceTypeFieldNumber = 4;
    private string resourceType_ = "";
    /// <summary>
    /// Fully qualified resource type (as in type URL without types.googleapis.com/
    /// prefix).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ResourceType {
      get { return resourceType_; }
      set {
        resourceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exact_context" field.</summary>
    public const int ExactContextFieldNumber = 5;
    /// <summary>
    /// Additional parameters that can be used to select resource variants.
    /// Matches must be exact, i.e. all context parameters must match exactly and
    /// there must be no additional context parameters set on the matched
    /// resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xds.Core.V3.ContextParams ExactContext {
      get { return contextParamSpecifierCase_ == ContextParamSpecifierOneofCase.ExactContext ? (global::Xds.Core.V3.ContextParams) contextParamSpecifier_ : null; }
      set {
        contextParamSpecifier_ = value;
        contextParamSpecifierCase_ = value == null ? ContextParamSpecifierOneofCase.None : ContextParamSpecifierOneofCase.ExactContext;
      }
    }

    /// <summary>Field number for the "directives" field.</summary>
    public const int DirectivesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Xds.Core.V3.ResourceLocator.Types.Directive> _repeated_directives_codec
        = pb::FieldCodec.ForMessage(50, global::Xds.Core.V3.ResourceLocator.Types.Directive.Parser);
    private readonly pbc::RepeatedField<global::Xds.Core.V3.ResourceLocator.Types.Directive> directives_ = new pbc::RepeatedField<global::Xds.Core.V3.ResourceLocator.Types.Directive>();
    /// <summary>
    /// A list of directives that appear in the xDS resource locator #fragment.
    ///
    /// When encoding to URI form, directives are percent encoded with comma
    /// separation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xds.Core.V3.ResourceLocator.Types.Directive> Directives {
      get { return directives_; }
    }

    private object contextParamSpecifier_;
    /// <summary>Enum of possible cases for the "context_param_specifier" oneof.</summary>
    public enum ContextParamSpecifierOneofCase {
      None = 0,
      ExactContext = 5,
    }
    private ContextParamSpecifierOneofCase contextParamSpecifierCase_ = ContextParamSpecifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContextParamSpecifierOneofCase ContextParamSpecifierCase {
      get { return contextParamSpecifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContextParamSpecifier() {
      contextParamSpecifierCase_ = ContextParamSpecifierOneofCase.None;
      contextParamSpecifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ResourceLocator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ResourceLocator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Scheme != other.Scheme) return false;
      if (Id != other.Id) return false;
      if (Authority != other.Authority) return false;
      if (ResourceType != other.ResourceType) return false;
      if (!object.Equals(ExactContext, other.ExactContext)) return false;
      if(!directives_.Equals(other.directives_)) return false;
      if (ContextParamSpecifierCase != other.ContextParamSpecifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Scheme != global::Xds.Core.V3.ResourceLocator.Types.Scheme.Xdstp) hash ^= Scheme.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Authority.Length != 0) hash ^= Authority.GetHashCode();
      if (ResourceType.Length != 0) hash ^= ResourceType.GetHashCode();
      if (contextParamSpecifierCase_ == ContextParamSpecifierOneofCase.ExactContext) hash ^= ExactContext.GetHashCode();
      hash ^= directives_.GetHashCode();
      hash ^= (int) contextParamSpecifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Scheme != global::Xds.Core.V3.ResourceLocator.Types.Scheme.Xdstp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Scheme);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Authority.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Authority);
      }
      if (ResourceType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResourceType);
      }
      if (contextParamSpecifierCase_ == ContextParamSpecifierOneofCase.ExactContext) {
        output.WriteRawTag(42);
        output.WriteMessage(ExactContext);
      }
      directives_.WriteTo(output, _repeated_directives_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Scheme != global::Xds.Core.V3.ResourceLocator.Types.Scheme.Xdstp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Scheme);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Authority.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Authority);
      }
      if (ResourceType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResourceType);
      }
      if (contextParamSpecifierCase_ == ContextParamSpecifierOneofCase.ExactContext) {
        output.WriteRawTag(42);
        output.WriteMessage(ExactContext);
      }
      directives_.WriteTo(ref output, _repeated_directives_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Scheme != global::Xds.Core.V3.ResourceLocator.Types.Scheme.Xdstp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Scheme);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Authority.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Authority);
      }
      if (ResourceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceType);
      }
      if (contextParamSpecifierCase_ == ContextParamSpecifierOneofCase.ExactContext) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExactContext);
      }
      size += directives_.CalculateSize(_repeated_directives_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ResourceLocator other) {
      if (other == null) {
        return;
      }
      if (other.Scheme != global::Xds.Core.V3.ResourceLocator.Types.Scheme.Xdstp) {
        Scheme = other.Scheme;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Authority.Length != 0) {
        Authority = other.Authority;
      }
      if (other.ResourceType.Length != 0) {
        ResourceType = other.ResourceType;
      }
      directives_.Add(other.directives_);
      switch (other.ContextParamSpecifierCase) {
        case ContextParamSpecifierOneofCase.ExactContext:
          if (ExactContext == null) {
            ExactContext = new global::Xds.Core.V3.ContextParams();
          }
          ExactContext.MergeFrom(other.ExactContext);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Scheme = (global::Xds.Core.V3.ResourceLocator.Types.Scheme) input.ReadEnum();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Authority = input.ReadString();
            break;
          }
          case 34: {
            ResourceType = input.ReadString();
            break;
          }
          case 42: {
            global::Xds.Core.V3.ContextParams subBuilder = new global::Xds.Core.V3.ContextParams();
            if (contextParamSpecifierCase_ == ContextParamSpecifierOneofCase.ExactContext) {
              subBuilder.MergeFrom(ExactContext);
            }
            input.ReadMessage(subBuilder);
            ExactContext = subBuilder;
            break;
          }
          case 50: {
            directives_.AddEntriesFrom(input, _repeated_directives_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Scheme = (global::Xds.Core.V3.ResourceLocator.Types.Scheme) input.ReadEnum();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Authority = input.ReadString();
            break;
          }
          case 34: {
            ResourceType = input.ReadString();
            break;
          }
          case 42: {
            global::Xds.Core.V3.ContextParams subBuilder = new global::Xds.Core.V3.ContextParams();
            if (contextParamSpecifierCase_ == ContextParamSpecifierOneofCase.ExactContext) {
              subBuilder.MergeFrom(ExactContext);
            }
            input.ReadMessage(subBuilder);
            ExactContext = subBuilder;
            break;
          }
          case 50: {
            directives_.AddEntriesFrom(ref input, _repeated_directives_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ResourceLocator message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Scheme {
        [pbr::OriginalName("XDSTP")] Xdstp = 0,
        [pbr::OriginalName("HTTP")] Http = 1,
        [pbr::OriginalName("FILE")] File = 2,
      }

      /// <summary>
      /// Directives provide information to data-plane load balancers on how xDS
      /// resource names are to be interpreted and potentially further resolved. For
      /// example, they may provide alternative resource locators for when primary
      /// resolution fails. Directives are not part of resource names and do not
      /// appear in a xDS transport discovery request.
      ///
      /// When encoding to URIs, directives take the form:
      ///
      /// &lt;directive name>=&lt;string representation of directive value>
      ///
      /// For example, we can have alt=xdstp://foo/bar or entry=some%20thing. Each
      /// directive value type may have its own string encoding, in the case of
      /// ResourceLocator there is a recursive URI encoding.
      ///
      /// Percent encoding applies to the URI encoding of the directive value.
      /// Multiple directives are comma-separated, so the reserved characters that
      /// require percent encoding in a directive value are [',', '#', '[', ']',
      /// '%']. These are the RFC3986 fragment reserved characters with the addition
      /// of the xDS scheme specific ','. See
      /// https://tools.ietf.org/html/rfc3986#page-49 for further details on URI ABNF
      /// and reserved characters.
      /// </summary>
      public sealed partial class Directive : pb::IMessage<Directive>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Directive> _parser = new pb::MessageParser<Directive>(() => new Directive());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Directive> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Xds.Core.V3.ResourceLocator.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Directive() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Directive(Directive other) : this() {
          switch (other.DirectiveCase) {
            case DirectiveOneofCase.Alt:
              Alt = other.Alt.Clone();
              break;
            case DirectiveOneofCase.Entry:
              Entry = other.Entry;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Directive Clone() {
          return new Directive(this);
        }

        /// <summary>Field number for the "alt" field.</summary>
        public const int AltFieldNumber = 1;
        /// <summary>
        /// An alternative resource locator for fallback if the resource is
        /// unavailable. For example, take the resource locator:
        ///
        ///   xdstp://foo/some-type/some-route-table#alt=xdstp://bar/some-type/another-route-table
        ///
        /// If the data-plane load balancer is unable to reach `foo` to fetch the
        /// resource, it will fallback to `bar`. Alternative resources do not need
        /// to have equivalent content, but they should be functional substitutes.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Xds.Core.V3.ResourceLocator Alt {
          get { return directiveCase_ == DirectiveOneofCase.Alt ? (global::Xds.Core.V3.ResourceLocator) directive_ : null; }
          set {
            directive_ = value;
            directiveCase_ = value == null ? DirectiveOneofCase.None : DirectiveOneofCase.Alt;
          }
        }

        /// <summary>Field number for the "entry" field.</summary>
        public const int EntryFieldNumber = 2;
        /// <summary>
        /// List collections support inlining of resources via the entry field in
        /// Resource. These inlined Resource objects may have an optional name
        /// field specified. When specified, the entry directive allows
        /// ResourceLocator to directly reference these inlined resources, e.g.
        /// xdstp://.../foo#entry=bar.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Entry {
          get { return directiveCase_ == DirectiveOneofCase.Entry ? (string) directive_ : ""; }
          set {
            directive_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            directiveCase_ = DirectiveOneofCase.Entry;
          }
        }

        private object directive_;
        /// <summary>Enum of possible cases for the "directive" oneof.</summary>
        public enum DirectiveOneofCase {
          None = 0,
          Alt = 1,
          Entry = 2,
        }
        private DirectiveOneofCase directiveCase_ = DirectiveOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DirectiveOneofCase DirectiveCase {
          get { return directiveCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDirective() {
          directiveCase_ = DirectiveOneofCase.None;
          directive_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Directive);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Directive other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Alt, other.Alt)) return false;
          if (Entry != other.Entry) return false;
          if (DirectiveCase != other.DirectiveCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (directiveCase_ == DirectiveOneofCase.Alt) hash ^= Alt.GetHashCode();
          if (directiveCase_ == DirectiveOneofCase.Entry) hash ^= Entry.GetHashCode();
          hash ^= (int) directiveCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (directiveCase_ == DirectiveOneofCase.Alt) {
            output.WriteRawTag(10);
            output.WriteMessage(Alt);
          }
          if (directiveCase_ == DirectiveOneofCase.Entry) {
            output.WriteRawTag(18);
            output.WriteString(Entry);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (directiveCase_ == DirectiveOneofCase.Alt) {
            output.WriteRawTag(10);
            output.WriteMessage(Alt);
          }
          if (directiveCase_ == DirectiveOneofCase.Entry) {
            output.WriteRawTag(18);
            output.WriteString(Entry);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (directiveCase_ == DirectiveOneofCase.Alt) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Alt);
          }
          if (directiveCase_ == DirectiveOneofCase.Entry) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Entry);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Directive other) {
          if (other == null) {
            return;
          }
          switch (other.DirectiveCase) {
            case DirectiveOneofCase.Alt:
              if (Alt == null) {
                Alt = new global::Xds.Core.V3.ResourceLocator();
              }
              Alt.MergeFrom(other.Alt);
              break;
            case DirectiveOneofCase.Entry:
              Entry = other.Entry;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Xds.Core.V3.ResourceLocator subBuilder = new global::Xds.Core.V3.ResourceLocator();
                if (directiveCase_ == DirectiveOneofCase.Alt) {
                  subBuilder.MergeFrom(Alt);
                }
                input.ReadMessage(subBuilder);
                Alt = subBuilder;
                break;
              }
              case 18: {
                Entry = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Xds.Core.V3.ResourceLocator subBuilder = new global::Xds.Core.V3.ResourceLocator();
                if (directiveCase_ == DirectiveOneofCase.Alt) {
                  subBuilder.MergeFrom(Alt);
                }
                input.ReadMessage(subBuilder);
                Alt = subBuilder;
                break;
              }
              case 18: {
                Entry = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
